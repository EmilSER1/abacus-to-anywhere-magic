import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";

export interface ProjectorEquipmentItem {
  id: string;
  "–û–¢–î–ï–õ–ï–ù–ò–ï": string;
  "–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ü–û–ú–ï–©–ï–ù–ò–Ø": string;
  "–ö–û–î –ü–û–ú–ï–©–ï–ù–ò–Ø": string;
  "–≠–¢–ê–ñ": number;
  "–ë–õ–û–ö": string;
  "–ü–ª–æ—â–∞–¥—å (–º2)"?: number;
  "–ö–æ–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"?: string;
  "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"?: string;
  "–ö–æ–ª-–≤–æ"?: string;
  "–ï–¥. –∏–∑–º."?: string;
  "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"?: string;
  equipment_status?: '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ' | '–ù–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ' | '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
  equipment_specification?: string;
  equipment_documents?: string;
  equipment_supplier?: string;
  equipment_price?: number;
  created_at: string;
  updated_at: string;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤
export const useProjectorRoomEquipment = (department: string, roomName: string) => {
  return useQuery({
    queryKey: ["projector-room-equipment", department, roomName],
    queryFn: async () => {
      const { data, error } = await supabase
        .from("projector_floors")
        .select("*")
        .eq("–û–¢–î–ï–õ–ï–ù–ò–ï", department)
        .eq("–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ü–û–ú–ï–©–ï–ù–ò–Ø", roomName)
        .order("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è");

      if (error) {
        throw error;
      }

      return data as ProjectorEquipmentItem[];
    },
    enabled: !!department && !!roomName,
  });
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
export const useUpdateProjectorEquipment = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (equipment: ProjectorEquipmentItem) => {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:', equipment);
      
      const { data, error } = await supabase
        .from("projector_floors")
        .update({
          "–ö–æ–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è": equipment["–ö–æ–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"],
          "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è": equipment["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"],
          "–ö–æ–ª-–≤–æ": equipment["–ö–æ–ª-–≤–æ"],
          "–ï–¥. –∏–∑–º.": equipment["–ï–¥. –∏–∑–º."],
          "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è": equipment["–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"],
          equipment_status: equipment.equipment_status,
          equipment_specification: equipment.equipment_specification,
          equipment_documents: equipment.equipment_documents,
          equipment_supplier: equipment.equipment_supplier,
          equipment_price: equipment.equipment_price,
        })
        .eq("id", equipment.id)
        .select()
        .single();

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error);
        throw error;
      }

      console.log('‚úÖ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', data);
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["projector-room-equipment"] });
      queryClient.invalidateQueries({ queryKey: ["projector-equipment"] });
      queryClient.invalidateQueries({ queryKey: ["projector-floors"] }); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
      });
    },
    onError: (error) => {
      console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: ${error.message}`,
        variant: "destructive",
      });
    },
  });
};

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
export const useAddProjectorEquipment = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (equipment: Omit<ProjectorEquipmentItem, 'id' | 'created_at' | 'updated_at'>) => {
      console.log('üîÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:', equipment);
      
      // –£–±–∏—Ä–∞–µ–º –ø–æ–ª–µ id –µ—Å–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ
      const cleanEquipment = { ...equipment };
      if ('id' in cleanEquipment && (!cleanEquipment.id || cleanEquipment.id === '')) {
        delete (cleanEquipment as any).id;
      }
      
      const { data, error } = await supabase
        .from("projector_floors")
        .insert([cleanEquipment])
        .select()
        .single();

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error);
        throw error;
      }

      console.log('‚úÖ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', data);
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["projector-room-equipment"] });
      queryClient.invalidateQueries({ queryKey: ["projector-equipment"] });
      queryClient.invalidateQueries({ queryKey: ["projector-floors"] }); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ",
      });
    },
    onError: (error) => {
      console.error('‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: ${error.message}`,
        variant: "destructive",
      });
    },
  });
};