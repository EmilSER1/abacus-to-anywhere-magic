import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";

export interface ProjectorRoomData {
  id: string;
  "–≠–¢–ê–ñ": number;
  "–ë–õ–û–ö": string;
  "–û–¢–î–ï–õ–ï–ù–ò–ï": string;
  "–ö–û–î –ü–û–ú–ï–©–ï–ù–ò–Ø": string;
  "–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ü–û–ú–ï–©–ï–ù–ò–Ø": string;
  "–ö–æ–¥ –ø–æ–º–µ—â–µ–Ω–∏—è": string | null;
  "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è": string | null;
  "–ü–ª–æ—â–∞–¥—å (–º2)": number | null;
  "–ö–æ–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è": string | null;
  "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è": string | null;
  "–ï–¥. –∏–∑–º.": string | null;
  "–ö–æ–ª-–≤–æ": string | null;
  "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è": string | null;
  created_at: string;
  updated_at: string;
}

export interface TurarRoomData {
  id: string;
  "–û—Ç–¥–µ–ª–µ–Ω–∏–µ/–ë–ª–æ–∫": string;
  "–ü–æ–º–µ—â–µ–Ω–∏–µ/–ö–∞–±–∏–Ω–µ—Ç": string;
  "–ö–æ–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è": string;
  "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": string;
  "–ö–æ–ª-–≤–æ": number;
  created_at: string;
  updated_at: string;
}

export const useProjectorRoomsAndEquipment = () => {
  return useQuery<ProjectorRoomData[]>({
    queryKey: ["projector-rooms-equipment"],
    queryFn: async () => {
      console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã...`);
      const { data, error } = await (supabase as any)
        .from("projector_floors")
        .select("*")
        .order('"–≠–¢–ê–ñ", "–û–¢–î–ï–õ–ï–ù–ò–ï", "–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ü–û–ú–ï–©–ï–ù–ò–Ø", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"');

      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤:`, error);
        throw error;
      }

      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data?.length || 0} –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ —Å –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
      const allDepartments = data?.map(item => item["–û–¢–î–ï–õ–ï–ù–ò–ï"]).filter(Boolean);
      const uniqueDepartments = [...new Set(allDepartments)];
      console.log(`üè¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (${uniqueDepartments.length}):`, uniqueDepartments);
      
      return (data || []) as ProjectorRoomData[];
    },
  });
};

export const useTurarRoomsAndEquipment = () => {
  return useQuery<TurarRoomData[]>({
    queryKey: ["turar-rooms-equipment"],
    queryFn: async () => {
      console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¢—É—Ä–∞—Ä –∏–∑ –±–∞–∑—ã...`);
      const { data, error } = await (supabase as any)
        .from("turar_medical")
        .select("*")
        .order('"–û—Ç–¥–µ–ª–µ–Ω–∏–µ/–ë–ª–æ–∫", "–ü–æ–º–µ—â–µ–Ω–∏–µ/–ö–∞–±–∏–Ω–µ—Ç", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"');

      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¢—É—Ä–∞—Ä:`, error);
        throw error;
      }

      console.log(`üè• –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data?.length || 0} –∑–∞–ø–∏—Å–µ–π —Ç—É—Ä–∞—Ä —Å –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
      const allDepartments = data?.map(item => item["–û—Ç–¥–µ–ª–µ–Ω–∏–µ/–ë–ª–æ–∫"]).filter(Boolean);
      const uniqueDepartments = [...new Set(allDepartments)];
      console.log(`üè• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –¢—É—Ä–∞—Ä –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (${uniqueDepartments.length}):`, uniqueDepartments);
      
      return (data || []) as TurarRoomData[];
    },
  });
};

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–±–∏–Ω–µ—Ç–∞–º –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤
export const useProjectorDepartmentRooms = (projectorDepartmentName: string) => {
  const { data: projectorData } = useProjectorRoomsAndEquipment();

  console.log(`üîç useProjectorDepartmentRooms –≤—ã–∑–≤–∞–Ω –¥–ª—è: "${projectorDepartmentName}"`);
  console.log(`üìä –í—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤:`, projectorData?.length);
  
  if (!projectorData || projectorData.length === 0) {
    console.log(`‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞`);
    return {};
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const allDepartments = projectorData?.map(item => item["–û–¢–î–ï–õ–ï–ù–ò–ï"]).filter(Boolean);
  const uniqueDepartments = [...new Set(allDepartments)];
  console.log(`üè¢ –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ (–≤—Å–µ–≥–æ ${uniqueDepartments.length}):`, uniqueDepartments);
  console.log(`üéØ –ò—â–µ–º –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤: "${projectorDepartmentName}"`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  const partialMatches = uniqueDepartments.filter(dept => 
    dept.toLowerCase().includes(projectorDepartmentName.toLowerCase()) || 
    projectorDepartmentName.toLowerCase().includes(dept.toLowerCase())
  );
  console.log(`üîç –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è "${projectorDepartmentName}":`, partialMatches);

  
  const organizedData = projectorData?.filter(item => {
    const itemDept = item["–û–¢–î–ï–õ–ï–ù–ò–ï"];
    const match = itemDept && itemDept.trim() === projectorDepartmentName.trim();
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: "${itemDept}" === "${projectorDepartmentName}" = ${match}`);
    return match;
  }).reduce((acc, item) => {
    const roomName = item["–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ü–û–ú–ï–©–ï–ù–ò–Ø"];
    if (!roomName) return acc;

    if (!acc[roomName]) {
      acc[roomName] = {
        roomInfo: {
          code: item["–ö–û–î –ü–û–ú–ï–©–ï–ù–ò–Ø"],
          name: roomName,
          area: item["–ü–ª–æ—â–∞–¥—å (–º2)"],
          floor: item["–≠–¢–ê–ñ"],
          block: item["–ë–õ–û–ö"]
        },
        equipment: []
      };
    }

    if (item["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"]?.trim()) {
      acc[roomName].equipment.push({
        code: item["–ö–æ–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"],
        name: item["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"],
        quantity: item["–ö–æ–ª-–≤–æ"] ? parseInt(item["–ö–æ–ª-–≤–æ"]) : 0,
        unit: item["–ï–¥. –∏–∑–º."],
        notes: item["–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"]
      });
    }

    return acc;
  }, {} as Record<string, {
    roomInfo: {
      code: string;
      name: string;
      area: number | null;
      floor: number;
      block: string;
    };
    equipment: Array<{
      code: string | null;
      name: string;
      quantity: number;
      unit: string | null;
      notes: string | null;
    }>;
  }>);

  console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è "${projectorDepartmentName}":`, {
    organizedData,
    roomsCount: Object.keys(organizedData || {}).length,
    foundRooms: Object.keys(organizedData || {}),
    isEmpty: Object.keys(organizedData || {}).length === 0
  });

  return organizedData || {};
};

export const useTurarDepartmentRooms = (departmentName: string) => {
  const { data: turarData } = useTurarRoomsAndEquipment();

  const organizedData = turarData?.filter(item => 
    item["–û—Ç–¥–µ–ª–µ–Ω–∏–µ/–ë–ª–æ–∫"] && item["–û—Ç–¥–µ–ª–µ–Ω–∏–µ/–ë–ª–æ–∫"].trim() === departmentName.trim()
  ).reduce((acc, item) => {
    const roomName = item["–ü–æ–º–µ—â–µ–Ω–∏–µ/–ö–∞–±–∏–Ω–µ—Ç"];
    if (!roomName) return acc;

    if (!acc[roomName]) {
      acc[roomName] = {
        roomInfo: {
          name: roomName
        },
        equipment: []
      };
    }

    if (item["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"]?.trim()) {
      acc[roomName].equipment.push({
        code: item["–ö–æ–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"],
        name: item["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"],
        quantity: item["–ö–æ–ª-–≤–æ"]
      });
    }

    return acc;
  }, {} as Record<string, {
    roomInfo: {
      name: string;
    };
    equipment: Array<{
      code: string;
      name: string;
      quantity: number;
    }>;
  }>);

  return organizedData || {};
};