import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";

export interface DepartmentMapping {
  id: string;
  turar_department: string;
  projector_department: string;
  created_at: string;
  updated_at: string;
}

export const useDepartmentMappings = () => {
  return useQuery({
    queryKey: ["department-mappings"],
    queryFn: async () => {
      const { data, error } = await supabase
        .from("department_mappings")
        .select("*")
        .order("turar_department, projector_department");

      if (error) {
        throw error;
      }

      return data as DepartmentMapping[];
    },
  });
};

export const useCreateDepartmentMapping = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (mapping: Omit<DepartmentMapping, 'id' | 'created_at' | 'updated_at'>) => {
      const { data, error } = await supabase
        .from("department_mappings")
        .insert([mapping])
        .select()
        .single();

      if (error) {
        throw error;
      }

      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["department-mappings"] });
    },
  });
};

export const useDeleteDepartmentMapping = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (id: string) => {
      const { error } = await supabase
        .from("department_mappings")
        .delete()
        .eq("id", id);

      if (error) {
        throw error;
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["department-mappings"] });
    },
  });
};

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export const useGetAllDepartments = () => {
  return useQuery({
    queryKey: ["all-departments", "v2"], // –ò–∑–º–µ–Ω–∏–ª –∫–ª—é—á –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–µ—à–∞
    queryFn: async () => {
      try {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ—Ç–¥–µ–ª–µ–Ω–∏–π...');
        
        // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –¢—É—Ä–∞—Ä
        const { data: turarData, error: turarError } = await supabase
          .from("turar_medical")
          .select('"–û—Ç–¥–µ–ª–µ–Ω–∏–µ/–ë–ª–æ–∫"')
          .limit(10000); // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç

        if (turarError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¢—É—Ä–∞—Ä:', turarError);
          throw turarError;
        }

        console.log('üìã –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¢—É—Ä–∞—Ä:', turarData?.length, '–∑–∞–ø–∏—Å–µ–π');
        console.log('üìã –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö –¢—É—Ä–∞—Ä:', turarData?.slice(0, 3));

        // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤
        const { data: projectorData, error: projectorError } = await supabase
          .from("projector_floors")
          .select('"–û–¢–î–ï–õ–ï–ù–ò–ï"')
          .not('"–û–¢–î–ï–õ–ï–ù–ò–ï"', 'is', null)
          .limit(10000); // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç

        if (projectorError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤:', projectorError);
          throw projectorError;
        }

        console.log('üèóÔ∏è –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤:', projectorData?.length, '–∑–∞–ø–∏—Å–µ–π');
        console.log('üèóÔ∏è –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤:', projectorData?.slice(0, 3));

        const uniqueTurarDepts = [...new Set(turarData?.map(item => item["–û—Ç–¥–µ–ª–µ–Ω–∏–µ/–ë–ª–æ–∫"]) || [])].filter(Boolean).sort();
        const uniqueProjectorDepts = [...new Set(projectorData?.map(item => {
          const dept = item["–û–¢–î–ï–õ–ï–ù–ò–ï"];
          if (!dept) return null;
          // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
          return dept.replace(/\s+/g, ' ').trim();
        }) || [])].filter(Boolean).sort();

        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –¢—É—Ä–∞—Ä:', uniqueTurarDepts.length, uniqueTurarDepts);
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤:', uniqueProjectorDepts.length, uniqueProjectorDepts);

        return {
          turarDepartments: uniqueTurarDepts,
          projectorDepartments: uniqueProjectorDepts
        };
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–π:', error);
        throw error;
      }
    },
  });
};