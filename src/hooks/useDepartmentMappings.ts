import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";

export interface DepartmentMapping {
  id: string;
  turar_department: string;
  projector_department: string;
  turar_department_id?: string;
  projector_department_id?: string;
  created_at: string;
  updated_at: string;
}

export const useDepartmentMappings = () => {
  return useQuery({
    queryKey: ["department-mappings"],
    queryFn: async () => {
      const { data, error } = await supabase
        .from("department_mappings")
        .select("*")
        .order("turar_department, projector_department");

      if (error) {
        throw error;
      }

      return data as DepartmentMapping[];
    },
  });
};

export const useCreateDepartmentMapping = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (mapping: Omit<DepartmentMapping, 'id' | 'created_at' | 'updated_at'>) => {
      const { data, error } = await supabase
        .from("department_mappings")
        .insert([mapping])
        .select()
        .single();

      if (error) {
        throw error;
      }

      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["department-mappings"] });
    },
  });
};

export const useDeleteDepartmentMapping = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (id: string) => {
      const { error } = await supabase
        .from("department_mappings")
        .delete()
        .eq("id", id);

      if (error) {
        throw error;
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["department-mappings"] });
    },
  });
};

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export const useGetAllDepartments = () => {
  return useQuery({
    queryKey: ["all-departments", "db-functions-v2"], // –°–±—Ä–æ—Å –∫–µ—à–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –ë–î
    queryFn: async () => {
      try {
        console.log('üîç –ò–°–ü–û–õ–¨–ó–£–ï–ú –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•');
        
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π –¢—É—Ä–∞—Ä
        console.log('üìã –í—ã–∑—ã–≤–∞–µ–º get_unique_turar_departments...');
        const { data: turarData, error: turarError } = await supabase
          .rpc('get_unique_turar_departments');

        if (turarError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¢—É—Ä–∞—Ä:', turarError);
          throw turarError;
        }

        console.log('üìã –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–£–†–ê–†:', turarData?.length, turarData);

        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤
        console.log('üèóÔ∏è –í—ã–∑—ã–≤–∞–µ–º get_unique_projector_departments...');
        const { data: projectorData, error: projectorError } = await supabase
          .rpc('get_unique_projector_departments');

        if (projectorError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤:', projectorError);
          throw projectorError;
        }

        console.log('üèóÔ∏è –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–ï–ö–¢–ò–†–û–í–©–ò–ö–ò:', projectorData?.length, projectorData);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const turarDepartments = turarData?.map(item => item.department_name) || [];
        const projectorDepartments = projectorData?.map(item => item.department_name) || [];

        console.log('‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
        console.log('- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¢—É—Ä–∞—Ä:', turarDepartments.length, turarDepartments);
        console.log('- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–∏:', projectorDepartments.length, projectorDepartments);

        return {
          turarDepartments,
          projectorDepartments
        };
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–π:', error);
        throw error;
      }
    },
  });
};