import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

export interface RoomConnectionById {
  id: string;
  turar_department_id: string;
  turar_room_id: string;
  projector_department_id: string;
  projector_room_id: string;
  created_at: string;
  updated_at: string;
}

export interface CreateRoomConnectionByIdRequest {
  turar_department_id: string;
  turar_room_id: string;
  projector_department_id: string;
  projector_room_id: string;
}

export const useRoomConnectionsById = () => {
  return useQuery({
    queryKey: ["room-connections-by-id"],
    queryFn: async () => {
      const { data, error } = await supabase
        .from("room_connections")
        .select(`
          id,
          turar_department_id,
          turar_room_id,
          projector_department_id,
          projector_room_id,
          created_at,
          updated_at
        `)
        .not("turar_department_id", "is", null)
        .not("turar_room_id", "is", null)
        .not("projector_department_id", "is", null)
        .not("projector_room_id", "is", null);

      if (error) {
        throw error;
      }

      return data as RoomConnectionById[];
    },
  });
};

export const useCreateRoomConnectionById = () => {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  return useMutation({
    mutationFn: async (connection: CreateRoomConnectionByIdRequest) => {
      console.log('üîÑ Creating room connection with data:', connection);
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const [turarDept, projectorDept] = await Promise.all([
        supabase.from("departments").select("name").eq("id", connection.turar_department_id).single(),
        supabase.from("departments").select("name").eq("id", connection.projector_department_id).single()
      ]);

      if (turarDept.error) {
        console.error('‚ùå Turar department not found:', turarDept.error);
        throw new Error(`–û—Ç–¥–µ–ª–µ–Ω–∏–µ –¢—É—Ä–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${connection.turar_department_id}`);
      }
      
      if (projectorDept.error) {
        console.error('‚ùå Projector department not found:', projectorDept.error);
        throw new Error(`–û—Ç–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${connection.projector_department_id}`);
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü, –∞ –Ω–µ –∏–∑ rooms
      const [turarRoom, projectorRoom] = await Promise.all([
        supabase.from("turar_medical").select("\"–ü–æ–º–µ—â–µ–Ω–∏–µ/–ö–∞–±–∏–Ω–µ—Ç\"").eq("id", connection.turar_room_id).limit(1).single(),
        supabase.from("projector_floors").select("\"–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ü–û–ú–ï–©–ï–ù–ò–Ø\"").eq("id", connection.projector_room_id).limit(1).single()
      ]);

      if (turarRoom.error) {
        console.error('‚ùå Turar room not found:', turarRoom.error);
        throw new Error(`–ö–∞–±–∏–Ω–µ—Ç –¢—É—Ä–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: ${connection.turar_room_id}`);
      }
      
      if (projectorRoom.error) {
        console.error('‚ùå Projector room not found:', projectorRoom.error);
        throw new Error(`–ö–∞–±–∏–Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${connection.projector_room_id}`);
      }

      console.log('‚úÖ Found departments and rooms:', {
        turarDept: turarDept.data.name,
        turarRoom: turarRoom.data["–ü–æ–º–µ—â–µ–Ω–∏–µ/–ö–∞–±–∏–Ω–µ—Ç"],
        projectorDept: projectorDept.data.name,
        projectorRoom: projectorRoom.data["–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ü–û–ú–ï–©–ï–ù–ò–Ø"]
      });

      // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å ID –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
      const { data, error } = await supabase
        .from("room_connections")
        .insert([{
          turar_department: turarDept.data.name,
          turar_room: turarRoom.data["–ü–æ–º–µ—â–µ–Ω–∏–µ/–ö–∞–±–∏–Ω–µ—Ç"],
          projector_department: projectorDept.data.name,
          projector_room: projectorRoom.data["–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ü–û–ú–ï–©–ï–ù–ò–Ø"],
          turar_department_id: connection.turar_department_id,
          turar_room_id: connection.turar_room_id,
          projector_department_id: connection.projector_department_id,
          projector_room_id: connection.projector_room_id
        }])
        .select()
        .single();

      if (error) {
        console.error('‚ùå Error creating room connection:', error);
        throw error;
      }

      console.log('‚úÖ Room connection created successfully:', data);

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å ID —Å–≤—è–∑–µ–π –ò –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
      await Promise.all([
        // –û–±–Ω–æ–≤–ª—è–µ–º projector_floors
        supabase
          .from("projector_floors")
          .update({ 
            connected_turar_room_id: connection.turar_room_id,
            connected_turar_department: turarDept.data.name,
            connected_turar_room: turarRoom.data["–ü–æ–º–µ—â–µ–Ω–∏–µ/–ö–∞–±–∏–Ω–µ—Ç"]
          })
          .eq("id", connection.projector_room_id), // –ò—Å–ø–æ–ª—å–∑—É–µ–º id –∑–∞–ø–∏—Å–∏, –∞ –Ω–µ room_id
        
        // –û–±–Ω–æ–≤–ª—è–µ–º turar_medical
        supabase
          .from("turar_medical")
          .update({ 
            connected_projector_room_id: connection.projector_room_id,
            connected_projector_department: projectorDept.data.name,
            connected_projector_room: projectorRoom.data["–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ü–û–ú–ï–©–ï–ù–ò–Ø"]
          })
          .eq("id", connection.turar_room_id) // –ò—Å–ø–æ–ª—å–∑—É–µ–º id –∑–∞–ø–∏—Å–∏, –∞ –Ω–µ room_id
      ]);

      console.log('‚úÖ Updated main tables with connection data');

      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["room-connections-by-id"] });
      queryClient.invalidateQueries({ queryKey: ["room-connections"] });
      queryClient.invalidateQueries({ queryKey: ["turar-medical"] });
      queryClient.invalidateQueries({ queryKey: ["projector-equipment"] });
      toast({
        title: "–°–≤—è–∑—å –∫–∞–±–∏–Ω–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞",
        description: "–ö–∞–±–∏–Ω–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω—ã",
      });
    },
  });
};

export const useDeleteRoomConnectionById = () => {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  return useMutation({
    mutationFn: async (id: string) => {
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–≤—è–∑–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
      const { data: connection } = await supabase
        .from("room_connections")
        .select("*")
        .eq("id", id)
        .single();

      if (connection) {
        // –û—á–∏—â–∞–µ–º —Å–≤—è–∑–∏ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –ø–æ ID –∑–∞–ø–∏—Å–µ–π
        if (connection.projector_room_id && connection.turar_room_id) {
          await Promise.all([
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Å–≤—è–∑–∏ –≤ projector_floors
            supabase
              .from("projector_floors")
              .update({ 
                connected_turar_room_id: null,
                connected_turar_department: null,
                connected_turar_room: null
              })
              .eq("id", connection.projector_room_id), // –ò—Å–ø–æ–ª—å–∑—É–µ–º id –∑–∞–ø–∏—Å–∏
            
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Å–≤—è–∑–∏ –≤ turar_medical
            supabase
              .from("turar_medical")
              .update({ 
                connected_projector_room_id: null,
                connected_projector_department: null,
                connected_projector_room: null
              })
              .eq("id", connection.turar_room_id) // –ò—Å–ø–æ–ª—å–∑—É–µ–º id –∑–∞–ø–∏—Å–∏
          ]);
        }
      }

      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å–≤—è–∑–∏
      const { error } = await supabase
        .from("room_connections")
        .delete()
        .eq("id", id);

      if (error) {
        throw error;
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["room-connections-by-id"] });
      queryClient.invalidateQueries({ queryKey: ["room-connections"] });
      queryClient.invalidateQueries({ queryKey: ["turar-medical"] });
      queryClient.invalidateQueries({ queryKey: ["projector-equipment"] });
      toast({
        title: "–°–≤—è–∑—å –∫–∞–±–∏–Ω–µ—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–∞",
        description: "–°–≤—è–∑—å –º–µ–∂–¥—É –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏ —É–¥–∞–ª–µ–Ω–∞",
      });
    },
  });
};