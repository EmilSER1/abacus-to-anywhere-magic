import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { Department } from "./useDepartments";

export interface DepartmentMappingWithDetails {
  id: string;
  turar_department: string;
  projector_department: string;
  turar_department_id?: string;
  projector_department_id?: string;
  turar_dept?: Department;
  projector_dept?: Department;
  created_at: string;
  updated_at: string;
}

export interface CreateDepartmentMappingByIdRequest {
  turar_department_id: string;
  projector_department_id: string;
}

export const useDepartmentMappingsWithDetails = () => {
  return useQuery({
    queryKey: ["department-mappings-with-details"],
    queryFn: async () => {
      const { data, error } = await supabase
        .from("department_mappings")
        .select("*")
        .order("turar_department, projector_department");

      if (error) {
        throw error;
      }

      return data as DepartmentMappingWithDetails[];
    },
  });
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ ID
export const useCreateDepartmentMappingById = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (mapping: CreateDepartmentMappingByIdRequest) => {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ø–æ ID
      const [turarDept, projectorDept] = await Promise.all([
        supabase.from("departments").select("name").eq("id", mapping.turar_department_id).single(),
        supabase.from("departments").select("name").eq("id", mapping.projector_department_id).single()
      ]);

      if (turarDept.error || projectorDept.error) {
        throw turarDept.error || projectorDept.error;
      }

      // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å ID –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const { data, error } = await supabase
        .from("department_mappings")
        .insert([{
          turar_department: turarDept.data.name,
          projector_department: projectorDept.data.name,
          turar_department_id: mapping.turar_department_id,
          projector_department_id: mapping.projector_department_id
        }])
        .select()
        .single();

      if (error) {
        throw error;
      }

      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["department-mappings"] });
      queryClient.invalidateQueries({ queryKey: ["department-mappings-with-details"] });
    },
  });
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–≤—è–∑–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ID
export const useUpdateDepartmentMappingWithIds = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async () => {
      console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–π —Å ID...");

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∏ –±–µ–∑ ID
      const { data: mappings, error: mappingsError } = await supabase
        .from("department_mappings")
        .select("*")
        .or("turar_department_id.is.null,projector_department_id.is.null");

      if (mappingsError) throw mappingsError;

      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${mappings.length} —Å–≤—è–∑–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–≤—è–∑—å
      for (const mapping of mappings) {
        try {
          // –ò—â–µ–º ID –¥–ª—è Turar –æ—Ç–¥–µ–ª–µ–Ω–∏—è
          const { data: turarDept } = await supabase
            .from("departments")
            .select("id")
            .eq("name", mapping.turar_department.trim())
            .single();

          // –ò—â–µ–º ID –¥–ª—è Projector –æ—Ç–¥–µ–ª–µ–Ω–∏—è  
          const { data: projectorDept } = await supabase
            .from("departments")
            .select("id")
            .eq("name", mapping.projector_department.trim())
            .single();

          if (turarDept && projectorDept) {
            await supabase
              .from("department_mappings")
              .update({
                turar_department_id: turarDept.id,
                projector_department_id: projectorDept.id
              })
              .eq("id", mapping.id);

            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å: ${mapping.turar_department} -> ${mapping.projector_department}`);
          } else {
            console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ—Ç–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Å–≤—è–∑–∏: ${mapping.turar_department} -> ${mapping.projector_department}`);
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ ${mapping.id}:`, error);
        }
      }

      return { updated: mappings.length };
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["department-mappings"] });
      queryClient.invalidateQueries({ queryKey: ["department-mappings-with-details"] });
    },
  });
};

export const useDeleteDepartmentMappingById = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (mappingId: string) => {
      console.log('üóëÔ∏è –û–ß–ò–°–¢–ö–ê –°–í–Ø–ó–ê–ù–ù–´–• –î–ê–ù–ù–´–• –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º:', { mappingId });
      
      try {
        // 1. –£–¥–∞–ª—è–µ–º mapped_turar_rooms –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –ø–æ—Ä—Ü–∏—è–º–∏ (–º–∞–∫—Å–∏–º—É–º 10 –∑–∞ —Ä–∞–∑)
        console.log('üßπ –£–¥–∞–ª—è–µ–º mapped_turar_rooms...');
        let deleted = 0;
        let batchSize = 10; // –ï—â–µ –±–æ–ª—å—à–µ —É–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏
        let maxRetries = 3;
        
        while (true) {
          const { data: toDelete, error: selectError } = await supabase
            .from('mapped_turar_rooms')
            .select('id')
            .eq('department_mapping_id', mappingId)
            .limit(batchSize);
          
          if (selectError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', selectError);
            break;
          }
          
          if (!toDelete || toDelete.length === 0) {
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –≤—Å–µ–≥–æ mapped_turar_rooms: ${deleted}`);
            break;
          }
          
          // –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
          let retryCount = 0;
          let deleteSuccess = false;
          
          while (retryCount < maxRetries && !deleteSuccess) {
            const idsToDelete = toDelete.map(item => item.id);
            const { error: deleteError } = await supabase
              .from('mapped_turar_rooms')
              .delete()
              .in('id', idsToDelete);
            
            if (!deleteError) {
              deleteSuccess = true;
              deleted += toDelete.length;
              console.log(`üìä –£–¥–∞–ª–µ–Ω–æ ${deleted} mapped_turar_rooms –∑–∞–ø–∏—Å–µ–π...`);
            } else {
              retryCount++;
              console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries}):`, deleteError);
              if (retryCount < maxRetries) {
                console.log(`‚è∏Ô∏è –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º ${retryCount * 500}ms...`);
                await new Promise(resolve => setTimeout(resolve, retryCount * 500));
              }
            }
          }
          
          if (!deleteSuccess) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Ä—Ü–∏—é –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
            break;
          }
          
          // –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ë–î
          if (toDelete.length === batchSize) {
            console.log('‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Ä—Ü–∏—è–º–∏ 500ms...');
            await new Promise(resolve => setTimeout(resolve, 500)); // –£–≤–µ–ª–∏—á–∏–ª–∏ –ø–∞—É–∑—É –¥–æ 500ms
          }
          
          // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º batch size, –∑–Ω–∞—á–∏—Ç –≤—Å–µ —É–¥–∞–ª–∏–ª–∏
          if (toDelete.length < batchSize) {
            break;
          }
        }
        
        // 2. –£–¥–∞–ª—è–µ–º mapped_projector_rooms
        console.log('üßπ –£–¥–∞–ª—è–µ–º mapped_projector_rooms...');
        const { error: projectorError } = await supabase
          .from('mapped_projector_rooms')
          .delete()
          .eq('department_mapping_id', mappingId);
        
        if (projectorError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è mapped_projector_rooms:', projectorError);
        }
        
        // 3. –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º —Å–∞–º—É —Å–≤—è–∑—å –æ—Ç–¥–µ–ª–µ–Ω–∏–π
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –æ—Ç–¥–µ–ª–µ–Ω–∏–π...');
        const { error } = await supabase
          .from('department_mappings')
          .delete()
          .eq('id', mappingId);

        if (error) {
          console.error('‚ùå –û–®–ò–ë–ö–ê –£–î–ê–õ–ï–ù–ò–Ø –°–í–Ø–ó–ò:', error);
          throw error;
        }

        console.log('‚úÖ –°–í–Ø–ó–¨ –£–°–ü–ï–®–ù–û –£–î–ê–õ–ï–ù–ê:', mappingId);
        return mappingId;
      } catch (error) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
        throw error;
      }
    },
    onSuccess: (mappingId) => {
      console.log('üîÑ –û–ë–ù–û–í–õ–Ø–ï–ú –ó–ê–ü–†–û–°–´ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:', mappingId);
      queryClient.invalidateQueries({ queryKey: ['department-mappings-with-details'] });
      queryClient.invalidateQueries({ queryKey: ['department-mappings'] });
      queryClient.invalidateQueries({ queryKey: ['room-connections'] });
      queryClient.invalidateQueries({ queryKey: ['room-connections-by-id'] });
    },
    onError: (error) => {
      console.error('‚ùå –û–®–ò–ë–ö–ê –í –ú–£–¢–ê–¶–ò–ò –£–î–ê–õ–ï–ù–ò–Ø:', error);
    }
  });
};

export const useUpdateDepartmentMappingById = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({ mappingId, turar_department_id, projector_department_id }: {
      mappingId: string;
      turar_department_id: string;
      projector_department_id: string;
    }) => {
      console.log('‚úèÔ∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–í–Ø–ó–ò –û–¢–î–ï–õ–ï–ù–ò–ô:', { mappingId, turar_department_id, projector_department_id });
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ø–æ ID
      const [turarDept, projectorDept] = await Promise.all([
        supabase.from("departments").select("name").eq("id", turar_department_id).single(),
        supabase.from("departments").select("name").eq("id", projector_department_id).single()
      ]);

      if (turarDept.error || projectorDept.error) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ù–ê–ó–í–ê–ù–ò–ô –û–¢–î–ï–õ–ï–ù–ò–ô:', turarDept.error || projectorDept.error);
        throw turarDept.error || projectorDept.error;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å
      const { data, error } = await supabase
        .from('department_mappings')
        .update({
          turar_department: turarDept.data.name,
          projector_department: projectorDept.data.name,
          turar_department_id,
          projector_department_id,
          updated_at: new Date().toISOString()
        })
        .eq('id', mappingId)
        .select()
        .single();

      if (error) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–í–Ø–ó–ò:', error);
        throw error;
      }

      console.log('‚úÖ –°–í–Ø–ó–¨ –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–ê:', data);
      return data;
    },
    onSuccess: (data) => {
      console.log('üîÑ –û–ë–ù–û–í–õ–Ø–ï–ú –ó–ê–ü–†–û–°–´ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', data.id);
      queryClient.invalidateQueries({ queryKey: ['department-mappings-with-details'] });
      queryClient.invalidateQueries({ queryKey: ['department-mappings'] });
    },
    onError: (error) => {
      console.error('‚ùå –û–®–ò–ë–ö–ê –í –ú–£–¢–ê–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø:', error);
    }
  });
};