import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion'
import { Link2, Building2, Trash2 } from 'lucide-react'
import { useDepartments } from '@/hooks/useDepartments'
import { useDepartmentMappingsWithDetails } from '@/hooks/useDepartmentMappingsById'
import { useRoomConnectionsById, useCreateRoomConnectionById, useDeleteRoomConnectionById } from '@/hooks/useRoomConnectionsById'
import DepartmentRoomsDisplay from '@/components/DepartmentRoomsDisplay'
import { useToast } from '@/hooks/use-toast'
import { useUserRole } from '@/hooks/useUserRole'
import { supabase } from '@/integrations/supabase/client'

export default function RoomConnectionsManager() {
  const [linkingRoom, setLinkingRoom] = useState<{
    departmentId: string;
    roomId: string;
    roomName: string;
    departmentName: string;
    isProjectorDepartment: boolean;
  } | null>(null)
  
  // –û—á–µ—Ä–µ–¥—å —Å–≤—è–∑–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
  const [connectionQueue, setConnectionQueue] = useState<Array<{
    sourceRoomId: string;
    sourceRoomName: string;
    sourceDepartmentId: string;
    sourceDepartmentName: string;
    targetRoomId: string;
    targetRoomName: string;
    targetDepartmentId: string;
    targetDepartmentName: string;
    isProjectorToTurar: boolean;
  }>>([])
  
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date())
  const [expandedDepartments, setExpandedDepartments] = useState<Set<string>>(new Set())

  const { data: departments } = useDepartments()
  const { data: departmentMappings } = useDepartmentMappingsWithDetails()
  const { data: connections, refetch: refetchConnections } = useRoomConnectionsById()
  const createConnectionMutation = useCreateRoomConnectionById()
  const deleteConnectionMutation = useDeleteRoomConnectionById()
  const { toast } = useToast()
  const { canEdit } = useUserRole()

  // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å ID)
  const linkedDepartmentPairs = departmentMappings?.filter(mapping => 
    mapping.turar_department_id && mapping.projector_department_id
  ) || []

  console.log('üîó –°–í–Ø–ó–ê–ù–ù–´–ï –û–¢–î–ï–õ–ï–ù–ò–Ø:', {
    departmentMappings: departmentMappings?.length || 0,
    linkedDepartmentPairs: linkedDepartmentPairs.length,
    –æ—Ç–¥–µ–ª–µ–Ω–∏—è–°–ò–¥—ã: linkedDepartmentPairs.map(p => ({
      turar: p.turar_department,
      projector: p.projector_department,
      turarId: p.turar_department_id,
      projectorId: p.projector_department_id
    }))
  });

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    const interval = setInterval(() => {
      refetchConnections();
      setLastUpdate(new Date());
    }, 10000); // 10 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval);
  }, [refetchConnections]);

  const handleLinkRoom = (roomId: string, roomName: string, departmentId: string, departmentName: string, isProjectorDepartment: boolean) => {
    if (linkingRoom) {
      // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ª–∏–±–æ —Å–±—Ä–æ—Å–∏—Ç—å, –ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –Ω–æ–≤—ã–º
      if (linkingRoom.roomId === roomId) {
        // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Ç–æ—Ç –∂–µ –∫–∞–±–∏–Ω–µ—Ç - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        setLinkingRoom(null);
        toast({
          title: "–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
          description: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è"
        });
        return;
      } else {
        // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –¥—Ä—É–≥–æ–π –∫–∞–±–∏–Ω–µ—Ç - –º–µ–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
        setLinkingRoom({
          roomId,
          roomName,
          departmentId,
          departmentName,
          isProjectorDepartment
        });
        
        toast({
          title: "–°–º–µ–Ω–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
          description: `–¢–µ–ø–µ—Ä—å –≤—ã–±—Ä–∞–Ω ${departmentName} - ${roomName}. –û—Ç–º–µ—Ç—å—Ç–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è.`
        });
        return;
      }
    }
    
    setLinkingRoom({
      roomId,
      roomName,
      departmentId,
      departmentName,
      isProjectorDepartment
    });
    
    toast({
      title: "–ö–∞–±–∏–Ω–µ—Ç –≤—ã–±—Ä–∞–Ω",
      description: `–í—ã–±—Ä–∞–Ω ${departmentName} - ${roomName}. –¢–µ–ø–µ—Ä—å –æ—Ç–º–µ—Ç—å—Ç–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è.`
    });
  };

  const addToConnectionQueue = (targetRoomId: string, targetRoomName: string, targetDepartmentId: string, targetDepartmentName: string) => {
    if (!linkingRoom) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–≤—è–∑–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
    const connectionExists = connectionQueue.some(conn => 
      (conn.sourceRoomId === linkingRoom.roomId && conn.targetRoomId === targetRoomId) ||
      (conn.sourceRoomId === targetRoomId && conn.targetRoomId === linkingRoom.roomId)
    );
    
    if (connectionExists) {
      toast({
        title: "–°–≤—è–∑—å —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏",
        description: "–≠—Ç–∞ —Å–≤—è–∑—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å",
        variant: "destructive"
      });
      return;
    }
    
    const newConnection = {
      sourceRoomId: linkingRoom.roomId,
      sourceRoomName: linkingRoom.roomName,
      sourceDepartmentId: linkingRoom.departmentId,
      sourceDepartmentName: linkingRoom.departmentName,
      targetRoomId,
      targetRoomName,
      targetDepartmentId,
      targetDepartmentName,
      isProjectorToTurar: linkingRoom.isProjectorDepartment
    };
    
    setConnectionQueue(prev => [...prev, newConnection]);
    
    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º linkingRoom, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π —Å —Ç–µ–º –∂–µ –∏—Å—Ö–æ–¥–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º
    
    toast({
      title: "–°–≤—è–∑—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å",
      description: `${linkingRoom.roomName} ‚Üî ${targetRoomName}. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤—è–∑–∏.`
    });
  };

  const removeFromConnectionQueue = (index: number) => {
    setConnectionQueue(prev => prev.filter((_, i) => i !== index));
    toast({
      title: "–°–≤—è–∑—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏",
      description: "–°–≤—è–∑—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–∑–¥–∞–Ω–∏—è"
    });
  };

  const createAllConnections = async () => {
    if (connectionQueue.length === 0) {
      toast({
        title: "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞",
        description: "–î–æ–±–∞–≤—å—Ç–µ —Å–≤—è–∑–∏ –≤ –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º",
        variant: "destructive"
      });
      return;
    }

    try {
      let successCount = 0;
      
      for (const connection of connectionQueue) {
        const connectionData = connection.isProjectorToTurar ? {
          projector_department_id: connection.sourceDepartmentId,
          projector_room_id: connection.sourceRoomId,
          turar_department_id: connection.targetDepartmentId,
          turar_room_id: connection.targetRoomId
        } : {
          turar_department_id: connection.sourceDepartmentId,
          turar_room_id: connection.sourceRoomId,
          projector_department_id: connection.targetDepartmentId,
          projector_room_id: connection.targetRoomId
        };

        await createConnectionMutation.mutateAsync(connectionData);
        successCount++;
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—á–µ—Ä–µ–¥—å, –æ—Å—Ç–∞–≤–ª—è–µ–º linkingRoom –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
      setConnectionQueue([]);
      // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º linkingRoom, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–≤—è–∑—ã–≤–∞—Ç—å –∫–∞–±–∏–Ω–µ—Ç—ã
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await refetchConnections();
      setLastUpdate(new Date());
      
      toast({
        title: "–°–≤—è–∑–∏ —Å–æ–∑–¥–∞–Ω—ã",
        description: `–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${successCount} —Å–≤—è–∑–µ–π`
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–≤—è–∑–∏",
        variant: "destructive"
      });
    }
  };

  const handleRemoveConnection = async (connectionId: string) => {
    try {
      await deleteConnectionMutation.mutateAsync(connectionId)
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      await refetchConnections();
      setLastUpdate(new Date());
      toast({
        title: "–°–≤—è–∑—å —É–¥–∞–ª–µ–Ω–∞",
        description: "–°–≤—è–∑—å –º–µ–∂–¥—É –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏:', error)
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å",
        variant: "destructive"
      });
    }
  }

  const cancelLinking = () => {
    setLinkingRoom(null);
    toast({
      title: "–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
      description: "–ü—Ä–æ—Ü–µ—Å—Å —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω"
    });
  };

  const clearConnectionQueue = () => {
    setConnectionQueue([]);
    toast({
      title: "–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞",
      description: "–í—Å–µ —Å–≤—è–∑–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏"
    });
  };

  const isRoomInQueue = (roomId: string) => {
    return connectionQueue.some(conn => 
      conn.sourceRoomId === roomId || conn.targetRoomId === roomId
    );
  };

  console.log('üîç –û—á–µ—Ä–µ–¥—å —Å–≤—è–∑–µ–π:', connectionQueue.map(c => ({
    source: c.sourceRoomName,
    target: c.targetRoomName,
    sourceId: c.sourceRoomId,
    targetId: c.targetRoomId
  })));

  const toggleDepartment = (deptKey: string) => {
    const newExpanded = new Set(expandedDepartments);
    if (newExpanded.has(deptKey)) {
      newExpanded.delete(deptKey);
    } else {
      newExpanded.add(deptKey);
    }
    setExpandedDepartments(newExpanded);
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–æ–≤</h2>
          <div className="flex items-center gap-4">
            <p className="text-muted-foreground">
              {linkingRoom 
                ? `–í—ã–±—Ä–∞–Ω: ${linkingRoom.departmentName} - ${linkingRoom.roomName}. –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ü–µ–ª–µ–≤—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –≤ –æ—á–µ—Ä–µ–¥—å.`
                : "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ü–µ–ª–µ–≤—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –≤ –æ—á–µ—Ä–µ–¥—å"
              }
            </p>
            <div className="text-xs text-muted-foreground">
              –û–±–Ω–æ–≤–ª–µ–Ω–æ: {lastUpdate.toLocaleTimeString()}
            </div>
          </div>
        </div>
        
        <div className="flex gap-2">
          {linkingRoom && (
            <Button variant="outline" onClick={cancelLinking}>
              –û—Ç–º–µ–Ω–∏—Ç—å —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
            </Button>
          )}
        </div>
      </div>

      {/* –û—á–µ—Ä–µ–¥—å —Å–≤—è–∑–µ–π */}
      {connectionQueue.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span>–û—á–µ—Ä–µ–¥—å —Å–≤—è–∑–µ–π ({connectionQueue.length})</span>
              <div className="flex gap-2">
                <Button onClick={createAllConnections} disabled={createConnectionMutation.isPending}>
                  {createConnectionMutation.isPending ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : `–°–æ–∑–¥–∞—Ç—å –≤—Å–µ —Å–≤—è–∑–∏ (${connectionQueue.length})`}
                </Button>
                <Button variant="outline" onClick={clearConnectionQueue}>
                  –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
                </Button>
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {connectionQueue.map((connection, index) => (
                <div key={index} className="flex items-center justify-between p-3 border rounded-lg bg-blue-50/50">
                  <div className="text-sm">
                    <div className="font-medium">
                      <span className="text-blue-600">{connection.sourceRoomName}</span> 
                      <span className="text-muted-foreground mx-2">({connection.sourceDepartmentName})</span>
                    </div>
                    <div className="flex items-center gap-2 mt-1">
                      <span className="text-xs text-muted-foreground">—Å–≤—è–∑–∞—Ç—å —Å</span>
                      <span className="font-medium text-green-600">{connection.targetRoomName}</span>
                      <span className="text-muted-foreground text-xs">({connection.targetDepartmentName})</span>
                    </div>
                  </div>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="text-red-600 hover:text-red-700 hover:bg-red-50"
                    onClick={() => removeFromConnectionQueue(index)}
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}


      {/* –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è–º –¢—É—Ä–∞—Ä */}
      <div className="space-y-8">
        {linkedDepartmentPairs.length === 0 ? (
          <Card>
            <CardContent className="py-8 text-center">
              <div className="text-muted-foreground">
                –ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–π".
              </div>
            </CardContent>
          </Card>
        ) : (
          // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è–º –¢—É—Ä–∞—Ä
          Object.entries(
            linkedDepartmentPairs.reduce((acc, pair) => {
              const turarDept = pair.turar_department;
              if (!acc[turarDept]) {
                acc[turarDept] = {
                  turar_department_id: pair.turar_department_id!,
                  turar_department: pair.turar_department,
                  projector_departments: []
                };
              }
              acc[turarDept].projector_departments.push({
                projector_department_id: pair.projector_department_id!,
                projector_department: pair.projector_department
              });
              return acc;
            }, {} as Record<string, {
              turar_department_id: string;
              turar_department: string;
              projector_departments: Array<{
                projector_department_id: string;
                projector_department: string;
              }>;
            }>)
          ).map(([turarDeptName, group]) => {
            const deptKey = `turar-${turarDeptName}`;
            const isExpanded = expandedDepartments.has(deptKey);
            
            return (
              <Card key={turarDeptName} className="overflow-hidden">
                <CardHeader 
                  className="pb-2 cursor-pointer hover:bg-muted/50"
                  onClick={() => toggleDepartment(deptKey)}
                >
                  <CardTitle className="flex items-center justify-between text-base">
                    <div className="flex items-center gap-2">
                      <Badge variant="outline" className="bg-blue-50 text-xs">–¢—É—Ä–∞—Ä</Badge>
                      <span>{turarDeptName}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge variant="secondary" className="text-xs">
                        {group.projector_departments.length} —Å–≤—è–∑–µ–π
                      </Badge>
                      <span className="text-sm">{isExpanded ? '‚ñº' : '‚ñ∂'}</span>
                    </div>
                  </CardTitle>
                </CardHeader>
                
                {isExpanded && (
                  <CardContent className="pt-0">
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                      {/* –ö–∞–±–∏–Ω–µ—Ç—ã –¢—É—Ä–∞—Ä */}
                      <DepartmentRoomsDisplay
                        departmentId={group.turar_department_id}
                        departmentName={group.turar_department}
                        connections={connections || []}
                        onRemoveConnection={handleRemoveConnection}
                        onLinkRoom={(roomId, roomName) => handleLinkRoom(roomId, roomName, group.turar_department_id, group.turar_department, false)}
                        linkingRoom={linkingRoom}
                        onAddToQueue={addToConnectionQueue}
                        isRoomInQueue={isRoomInQueue}
                        selectedRooms={new Set()}
                        multiSelectMode={false}
                      />

                      {/* –°–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ */}
                      <div className="space-y-3">
                        {group.projector_departments.map((projDept) => (
                          <DepartmentRoomsDisplay
                            key={projDept.projector_department_id}
                            departmentId={projDept.projector_department_id}
                            departmentName={projDept.projector_department}
                            connections={connections || []}
                            onRemoveConnection={handleRemoveConnection}
                            onLinkRoom={(roomId, roomName) => handleLinkRoom(roomId, roomName, projDept.projector_department_id, projDept.projector_department, true)}
                            linkingRoom={linkingRoom}
                            onAddToQueue={addToConnectionQueue}
                            isRoomInQueue={isRoomInQueue}
                            isProjectorDepartment={true}
                            selectedRooms={new Set()}
                            multiSelectMode={false}
                          />
                        ))}
                      </div>
                    </div>
                  </CardContent>
                )}
              </Card>
            );
          })
        )}
      </div>
    </div>
  )
}