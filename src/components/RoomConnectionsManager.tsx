import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion'
import { Link2, Building2 } from 'lucide-react'
import { useDepartments } from '@/hooks/useDepartments'
import { useDepartmentMappingsWithDetails } from '@/hooks/useDepartmentMappingsById'
import { useRoomConnectionsById, useCreateRoomConnectionById, useDeleteRoomConnectionById } from '@/hooks/useRoomConnectionsById'
import DepartmentRoomsDisplay from '@/components/DepartmentRoomsDisplay'
import { useToast } from '@/hooks/use-toast'
import { useUserRole } from '@/hooks/useUserRole'

export default function RoomConnectionsManager() {
  const [linkingRoom, setLinkingRoom] = useState<{
    departmentId: string;
    roomId: string;
    roomName: string;
    departmentName: string;
    isProjectorDepartment: boolean;
  } | null>(null)
  
  const [showConnectionDialog, setShowConnectionDialog] = useState(false)
  const [selectedTargetDeptId, setSelectedTargetDeptId] = useState('')
  const [selectedTargetRoomId, setSelectedTargetRoomId] = useState('')
  const [availableTargetDepts, setAvailableTargetDepts] = useState<Array<{id: string; name: string}>>([])
  const [step, setStep] = useState<'department' | 'room'>('department')
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date())
  const [selectedRooms, setSelectedRooms] = useState<Set<string>>(new Set())
  const [expandedDepartments, setExpandedDepartments] = useState<Set<string>>(new Set())

  const { data: departments } = useDepartments()
  const { data: departmentMappings } = useDepartmentMappingsWithDetails()
  const { data: connections, refetch: refetchConnections } = useRoomConnectionsById()
  
  // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  console.log('üîó RoomConnectionsManager connections:', {
    total: connections?.length || 0,
    connections: connections?.map(c => ({
      id: c.id,
      turar_room_id: c.turar_room_id,
      projector_room_id: c.projector_room_id
    })) || []
  });
  const createConnectionMutation = useCreateRoomConnectionById()
  const deleteConnectionMutation = useDeleteRoomConnectionById()
  const { toast } = useToast()
  const { canEdit } = useUserRole()

  // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å ID)
  const linkedDepartmentPairs = departmentMappings?.filter(mapping => 
    mapping.turar_department_id && mapping.projector_department_id
  ) || []

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    const interval = setInterval(() => {
      refetchConnections();
      setLastUpdate(new Date());
    }, 10000); // 10 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval);
  }, [refetchConnections]);

  const handleLinkRoom = (roomId: string, roomName: string, departmentId: string, departmentName: string, isProjectorDepartment: boolean) => {
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º/—É–±–∏—Ä–∞–µ–º –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    if (linkingRoom && linkingRoom.departmentId !== departmentId) {
      const newSelectedRooms = new Set(selectedRooms);
      if (newSelectedRooms.has(roomId)) {
        newSelectedRooms.delete(roomId);
      } else {
        newSelectedRooms.add(roomId);
      }
      setSelectedRooms(newSelectedRooms);
      
      toast({
        title: "–ö–∞–±–∏–Ω–µ—Ç –≤—ã–±—Ä–∞–Ω",
        description: `${newSelectedRooms.has(roomId) ? '–î–æ–±–∞–≤–ª–µ–Ω' : '–£–±—Ä–∞–Ω'}: ${departmentName} - ${roomName}. –í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ: ${newSelectedRooms.size}`
      });
      return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
    setLinkingRoom({
      departmentId,
      roomId,
      roomName,
      departmentName,
      isProjectorDepartment
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
    if (isProjectorDepartment) {
      const turarDepts = linkedDepartmentPairs
        .filter(pair => pair.projector_department_id === departmentId)
        .map(pair => ({
          id: pair.turar_department_id!,
          name: pair.turar_department
        }));
      setAvailableTargetDepts(turarDepts);
    } else {
      const projectorDepts = linkedDepartmentPairs
        .filter(pair => pair.turar_department_id === departmentId)
        .map(pair => ({
          id: pair.projector_department_id!,
          name: pair.projector_department
        }));
      setAvailableTargetDepts(projectorDepts);
    }

    setStep('department');
    setSelectedTargetDeptId('');
    setSelectedTargetRoomId('');
    setSelectedRooms(new Set());

    toast({
      title: "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ",
      description: `–ò—Å—Ö–æ–¥–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: ${departmentName} - ${roomName}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è.`
    });
  };

  const createMultipleConnections = async () => {
    if (!linkingRoom || selectedRooms.size === 0) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è",
        variant: "destructive"
      });
      return;
    }

    try {
      let successCount = 0;
      
      for (const roomId of selectedRooms) {
        const connectionData = linkingRoom.isProjectorDepartment ? {
          turar_department_id: linkingRoom.departmentId,
          turar_room_id: roomId,
          projector_department_id: linkingRoom.departmentId,
          projector_room_id: linkingRoom.roomId
        } : {
          turar_department_id: linkingRoom.departmentId,
          turar_room_id: linkingRoom.roomId,
          projector_department_id: linkingRoom.departmentId,
          projector_room_id: roomId
        };

        await createConnectionMutation.mutateAsync(connectionData);
        successCount++;
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setLinkingRoom(null);
      setSelectedRooms(new Set());
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await refetchConnections();
      setLastUpdate(new Date());
      
      toast({
        title: "–°–≤—è–∑–∏ —Å–æ–∑–¥–∞–Ω—ã",
        description: `–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${successCount} —Å–≤—è–∑–µ–π`
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–≤—è–∑–∏",
        variant: "destructive"
      });
    }
  };

  const handleRemoveConnection = async (connectionId: string) => {
    try {
      await deleteConnectionMutation.mutateAsync(connectionId)
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      await refetchConnections();
      setLastUpdate(new Date());
      toast({
        title: "–°–≤—è–∑—å —É–¥–∞–ª–µ–Ω–∞",
        description: "–°–≤—è–∑—å –º–µ–∂–¥—É –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏:', error)
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å",
        variant: "destructive"
      });
    }
  }

  const cancelLinking = () => {
    setLinkingRoom(null)
    setSelectedRooms(new Set())
    setShowConnectionDialog(false)
    setSelectedTargetDeptId('')
    setSelectedTargetRoomId('')
    toast({
      title: "–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
      description: "–ü—Ä–æ—Ü–µ—Å—Å —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω"
    })
  }

  const toggleDepartment = (deptKey: string) => {
    const newExpanded = new Set(expandedDepartments);
    if (newExpanded.has(deptKey)) {
      newExpanded.delete(deptKey);
    } else {
      newExpanded.add(deptKey);
    }
    setExpandedDepartments(newExpanded);
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–æ–≤</h2>
          <div className="flex items-center gap-4">
            <p className="text-muted-foreground">
              –ù–∞–∂–º–∏—Ç–µ "–°–≤—è–∑–∞—Ç—å –∫–∞–±–∏–Ω–µ—Ç—ã" –Ω–∞ –ª—é–±–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
            </p>
            <div className="text-xs text-muted-foreground">
              –û–±–Ω–æ–≤–ª–µ–Ω–æ: {lastUpdate.toLocaleTimeString()}
            </div>
          </div>
        </div>
        
        <div className="flex gap-2">
          {linkingRoom && selectedRooms.size > 0 && (
            <Button onClick={createMultipleConnections} disabled={createConnectionMutation.isPending}>
              {createConnectionMutation.isPending ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : `–°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑–∏ (${selectedRooms.size})`}
            </Button>
          )}
          {linkingRoom && (
            <Button variant="outline" onClick={cancelLinking}>
              –û—Ç–º–µ–Ω–∏—Ç—å —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
            </Button>
          )}
        </div>
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–≤—è–∑—ã–≤–∞–Ω–∏—è */}
      {linkingRoom && (
        <Card className="border-primary bg-primary/5">
          <CardContent className="pt-6">
            <div className="flex items-center gap-3">
              <Link2 className="h-5 w-5 text-primary" />
              <div className="flex-1">
                <div className="font-medium">–†–µ–∂–∏–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω</div>
                <div className="text-sm text-muted-foreground">
                  –ò—Å—Ö–æ–¥–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: {linkingRoom.departmentName} - {linkingRoom.roomName}
                </div>
                {selectedRooms.size > 0 ? (
                  <div className="text-sm text-green-600 font-medium">
                    ‚úÖ –í—ã–±—Ä–∞–Ω–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è: {selectedRooms.size}
                  </div>
                ) : (
                  <div className="text-sm text-orange-600">
                    üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç—ã –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º —Ç–∏–ø–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–π
                  </div>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è–º –¢—É—Ä–∞—Ä */}
      <div className="space-y-8">
        {linkedDepartmentPairs.length === 0 ? (
          <Card>
            <CardContent className="py-8 text-center">
              <div className="text-muted-foreground">
                –ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–π".
              </div>
            </CardContent>
          </Card>
        ) : (
          // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è–º –¢—É—Ä–∞—Ä
          Object.entries(
            linkedDepartmentPairs.reduce((acc, pair) => {
              const turarDept = pair.turar_department;
              if (!acc[turarDept]) {
                acc[turarDept] = {
                  turar_department_id: pair.turar_department_id!,
                  turar_department: pair.turar_department,
                  projector_departments: []
                };
              }
              acc[turarDept].projector_departments.push({
                projector_department_id: pair.projector_department_id!,
                projector_department: pair.projector_department
              });
              return acc;
            }, {} as Record<string, {
              turar_department_id: string;
              turar_department: string;
              projector_departments: Array<{
                projector_department_id: string;
                projector_department: string;
              }>;
            }>)
          ).map(([turarDeptName, group]) => {
            const deptKey = `turar-${turarDeptName}`;
            const isExpanded = expandedDepartments.has(deptKey);
            
            return (
              <Card key={turarDeptName} className="overflow-hidden">
                <CardHeader 
                  className="pb-2 cursor-pointer hover:bg-muted/50"
                  onClick={() => toggleDepartment(deptKey)}
                >
                  <CardTitle className="flex items-center justify-between text-base">
                    <div className="flex items-center gap-2">
                      <Badge variant="outline" className="bg-blue-50 text-xs">–¢—É—Ä–∞—Ä</Badge>
                      <span>{turarDeptName}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge variant="secondary" className="text-xs">
                        {group.projector_departments.length} —Å–≤—è–∑–µ–π
                      </Badge>
                      <span className="text-sm">{isExpanded ? '‚ñº' : '‚ñ∂'}</span>
                    </div>
                  </CardTitle>
                </CardHeader>
                
                {isExpanded && (
                  <CardContent className="pt-0">
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                      {/* –ö–∞–±–∏–Ω–µ—Ç—ã –¢—É—Ä–∞—Ä */}
                      <DepartmentRoomsDisplay
                        departmentId={group.turar_department_id}
                        departmentName={group.turar_department}
                        connections={connections || []}
                        onRemoveConnection={handleRemoveConnection}
                        onLinkRoom={(roomId, roomName) => handleLinkRoom(roomId, roomName, group.turar_department_id, group.turar_department, false)}
                        linkingRoom={linkingRoom}
                        selectedRooms={selectedRooms}
                        multiSelectMode={linkingRoom !== null}
                      />

                      {/* –°–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ */}
                      <div className="space-y-3">
                        {group.projector_departments.map((projDept) => (
                          <DepartmentRoomsDisplay
                            key={projDept.projector_department_id}
                            departmentId={projDept.projector_department_id}
                            departmentName={projDept.projector_department}
                            connections={connections || []}
                            onRemoveConnection={handleRemoveConnection}
                            onLinkRoom={(roomId, roomName) => handleLinkRoom(roomId, roomName, projDept.projector_department_id, projDept.projector_department, true)}
                            linkingRoom={linkingRoom}
                            isProjectorDepartment={true}
                            selectedRooms={selectedRooms}
                            multiSelectMode={linkingRoom !== null}
                          />
                        ))}
                      </div>
                    </div>
                  </CardContent>
                )}
              </Card>
            );
          })
        )}
      </div>
    </div>
  )
}