import React, { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { Plus, Save, Trash2, Upload } from 'lucide-react';
import { useUserRole } from '@/hooks/useUserRole';

interface BulkEquipmentRow {
  code: string;
  name: string;
  quantity: string;
  unit: string;
  status: '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ' | '–ù–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ' | '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
  specification: string;
  documents: string;
  supplier: string;
  price: string;
  notes: string;
}

interface BulkEquipmentTableProps {
  department: string;
  room: string;
  isOpen: boolean;
  onClose: () => void;
  onSave: (equipment: BulkEquipmentRow[]) => void;
}

const statusOptions = [
  { value: '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ', label: '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ', color: 'bg-green-100 text-green-800' },
  { value: '–ù–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ', label: '–ù–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ', color: 'bg-yellow-100 text-yellow-800' },
  { value: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ', label: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ', color: 'bg-red-100 text-red-800' }
];

export const BulkEquipmentTable: React.FC<BulkEquipmentTableProps> = ({
  department,
  room,
  isOpen,
  onClose,
  onSave
}) => {
  const { currentUserRole } = useUserRole();
  const isAdmin = currentUserRole === 'admin';
  const { toast } = useToast();
  const [rows, setRows] = useState<BulkEquipmentRow[]>([
    {
      code: '',
      name: '',
      quantity: '',
      unit: '',
      status: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
      specification: '',
      documents: '',
      supplier: '',
      price: '',
      notes: ''
    }
  ]);

  const tableRef = useRef<HTMLTableElement>(null);

  const addRow = () => {
    setRows([...rows, {
      code: '',
      name: '',
      quantity: '',
      unit: '',
      status: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
      specification: '',
      documents: '',
      supplier: '',
      price: '',
      notes: ''
    }]);
  };

  const removeRow = (index: number) => {
    if (rows.length > 1) {
      setRows(rows.filter((_, i) => i !== index));
    }
  };

  const updateRow = (index: number, field: keyof BulkEquipmentRow, value: string) => {
    const newRows = [...rows];
    newRows[index] = { ...newRows[index], [field]: value };
    setRows(newRows);
  };

  const handlePaste = async () => {
    try {
      const text = await navigator.clipboard.readText();
      const lines = text.split('\n').filter(line => line.trim());
      
      if (lines.length === 0) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç",
          variant: "destructive"
        });
        return;
      }

      const newRows: BulkEquipmentRow[] = lines.map(line => {
        const cells = line.split('\t'); // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç–∞–±—É–ª—è—Ü–∏–∏ (Excel)
        return {
          code: cells[0] || '',
          name: cells[1] || '',
          quantity: cells[2] || '',
          unit: cells[3] || '',
          status: (cells[4] as any) || '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
          specification: cells[5] || '',
          documents: cells[6] || '',
          supplier: isAdmin ? (cells[7] || '') : '',
          price: isAdmin ? (cells[8] || '') : '',
          notes: isAdmin ? (cells[9] || cells[7] || '') : (cells[7] || '')
        };
      });

      setRows(newRows);
      toast({
        title: "–î–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã",
        description: `–î–æ–±–∞–≤–ª–µ–Ω–æ ${newRows.length} —Å—Ç—Ä–æ–∫ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞`
      });
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞",
        variant: "destructive"
      });
    }
  };

  const handleSave = () => {
    const validRows = rows.filter(row => row.code || row.name);
    if (validRows.length === 0) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
        variant: "destructive"
      });
      return;
    }

    onSave(validRows);
    setRows([{
      code: '',
      name: '',
      quantity: '',
      unit: '',
      status: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
      specification: '',
      documents: '',
      supplier: '',
      price: '',
      notes: ''
    }]);
  };

  const clearAll = () => {
    setRows([{
      code: '',
      name: '',
      quantity: '',
      unit: '',
      status: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
      specification: '',
      documents: '',
      supplier: '',
      price: '',
      notes: ''
    }]);
  };

  if (!isOpen) return null;

  return (
    <Card className="mt-4">
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <CardTitle className="text-sm">
            –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤: {department} - {room}
          </CardTitle>
          <Button variant="ghost" size="sm" onClick={onClose} className="h-auto p-2">
            ‚úï
          </Button>
        </div>
        <div className="flex gap-2 flex-wrap">
          <Button size="sm" onClick={handlePaste} className="gap-2">
            <Upload className="h-3 w-3" />
            –í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞
          </Button>
          <Button size="sm" variant="outline" onClick={addRow} className="gap-2">
            <Plus className="h-3 w-3" />
            –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É
          </Button>
          <Button size="sm" variant="outline" onClick={clearAll} className="gap-2">
            <Trash2 className="h-3 w-3" />
            –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
          </Button>
          <Button size="sm" onClick={handleSave} className="gap-2 bg-green-600 hover:bg-green-700">
            <Save className="h-3 w-3" />
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å ({rows.filter(r => r.code || r.name).length})
          </Button>
        </div>
      </CardHeader>
      
      <CardContent>
        <div className="text-xs text-muted-foreground mb-3">
          üí° –°–æ–≤–µ—Ç: –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel –∏ –Ω–∞–∂–º–∏—Ç–µ "–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞" –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é
        </div>
        
        <div className="overflow-x-auto border rounded-lg">
          <table ref={tableRef} className="w-full text-xs border-collapse">
            <thead className="bg-muted/50">
              <tr>
                <th className="border border-border p-2 text-left min-w-[100px]">–ö–æ–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</th>
                <th className="border border-border p-2 text-left min-w-[150px]">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ*</th>
                <th className="border border-border p-2 text-left min-w-[80px]">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                <th className="border border-border p-2 text-left min-w-[80px]">–ï–¥. –∏–∑–º.</th>
                <th className="border border-border p-2 text-left min-w-[120px]">–°—Ç–∞—Ç—É—Å</th>
                <th className="border border-border p-2 text-left min-w-[150px]">–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è</th>
                <th className="border border-border p-2 text-left min-w-[150px]">–î–æ–∫—É–º–µ–Ω—Ç—ã</th>
                {isAdmin && <th className="border border-border p-2 text-left min-w-[120px]">–ü–æ—Å—Ç–∞–≤—â–∏–∫</th>}
                {isAdmin && <th className="border border-border p-2 text-left min-w-[100px]">–¶–µ–Ω–∞ (—Ä—É–±.)</th>}
                <th className="border border-border p-2 text-left min-w-[150px]">–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</th>
                <th className="border border-border p-2 text-center w-[60px]">–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {rows.map((row, index) => (
                <tr key={index} className="hover:bg-muted/20">
                  <td className="border border-border p-1">
                    <input
                      type="text"
                      value={row.code}
                      onChange={(e) => updateRow(index, 'code', e.target.value)}
                      className="w-full p-1 text-xs border-0 bg-transparent focus:ring-1 focus:ring-blue-500 rounded"
                      placeholder="–ö–æ–¥..."
                    />
                  </td>
                  <td className="border border-border p-1">
                    <input
                      type="text"
                      value={row.name}
                      onChange={(e) => updateRow(index, 'name', e.target.value)}
                      className="w-full p-1 text-xs border-0 bg-transparent focus:ring-1 focus:ring-blue-500 rounded"
                      placeholder="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ*"
                      required
                    />
                  </td>
                  <td className="border border-border p-1">
                    <input
                      type="text"
                      value={row.quantity}
                      onChange={(e) => updateRow(index, 'quantity', e.target.value)}
                      className="w-full p-1 text-xs border-0 bg-transparent focus:ring-1 focus:ring-blue-500 rounded"
                      placeholder="1"
                    />
                  </td>
                  <td className="border border-border p-1">
                    <input
                      type="text"
                      value={row.unit}
                      onChange={(e) => updateRow(index, 'unit', e.target.value)}
                      className="w-full p-1 text-xs border-0 bg-transparent focus:ring-1 focus:ring-blue-500 rounded"
                      placeholder="—à—Ç"
                    />
                  </td>
                  <td className="border border-border p-1">
                    <select
                      value={row.status}
                      onChange={(e) => updateRow(index, 'status', e.target.value)}
                      className="w-full p-1 text-xs border-0 bg-transparent focus:ring-1 focus:ring-blue-500 rounded"
                    >
                      {statusOptions.map(option => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  </td>
                  <td className="border border-border p-1">
                    <input
                      type="text"
                      value={row.specification}
                      onChange={(e) => updateRow(index, 'specification', e.target.value)}
                      className="w-full p-1 text-xs border-0 bg-transparent focus:ring-1 focus:ring-blue-500 rounded"
                      placeholder="–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è..."
                    />
                  </td>
                  <td className="border border-border p-1">
                    <input
                      type="text"
                      value={row.documents}
                      onChange={(e) => updateRow(index, 'documents', e.target.value)}
                      className="w-full p-1 text-xs border-0 bg-transparent focus:ring-1 focus:ring-blue-500 rounded"
                      placeholder="–î–æ–∫—É–º–µ–Ω—Ç—ã..."
                    />
                  </td>
                  {isAdmin && (
                    <td className="border border-border p-1">
                      <input
                        type="text"
                        value={row.supplier}
                        onChange={(e) => updateRow(index, 'supplier', e.target.value)}
                        className="w-full p-1 text-xs border-0 bg-transparent focus:ring-1 focus:ring-blue-500 rounded"
                        placeholder="–ü–æ—Å—Ç–∞–≤—â–∏–∫..."
                      />
                    </td>
                  )}
                  {isAdmin && (
                    <td className="border border-border p-1">
                      <input
                        type="number"
                        step="0.01"
                        value={row.price}
                        onChange={(e) => updateRow(index, 'price', e.target.value)}
                        className="w-full p-1 text-xs border-0 bg-transparent focus:ring-1 focus:ring-blue-500 rounded"
                        placeholder="0.00"
                      />
                    </td>
                  )}
                  <td className="border border-border p-1">
                    <input
                      type="text"
                      value={row.notes}
                      onChange={(e) => updateRow(index, 'notes', e.target.value)}
                      className="w-full p-1 text-xs border-0 bg-transparent focus:ring-1 focus:ring-blue-500 rounded"
                      placeholder="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è..."
                    />
                  </td>
                  <td className="border border-border p-1 text-center">
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => removeRow(index)}
                      disabled={rows.length === 1}
                      className="h-6 w-6 p-0 text-red-600 hover:text-red-700 hover:bg-red-50"
                    >
                      <Trash2 className="h-3 w-3" />
                    </Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        
        <div className="mt-3 text-xs text-muted-foreground space-y-1">
          <p>üìã <strong>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</strong></p>
          <p>‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel/Google Sheets –∏ –Ω–∞–∂–º–∏—Ç–µ "–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞"</p>
          <p>‚Ä¢ –ò–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é, –¥–æ–±–∞–≤–ª—è—è —Å—Ç—Ä–æ–∫–∏ –∫–Ω–æ–ø–∫–æ–π "+"</p>
          <p>‚Ä¢ –ü–æ–ª—è "–ö–æ–¥" –∏–ª–∏ "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</p>
          {isAdmin && <p>‚Ä¢ –ü–æ–ª—è "–ü–æ—Å—Ç–∞–≤—â–∏–∫" –∏ "–¶–µ–Ω–∞" –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º</p>}
        </div>
      </CardContent>
    </Card>
  );
};