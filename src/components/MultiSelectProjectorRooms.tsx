import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent } from '@/components/ui/card';
import { X, Plus, Link, Check, Building2 } from 'lucide-react';
import { useProjectorData } from '@/hooks/useProjectorData';
import { useDepartmentMappings } from '@/hooks/useDepartmentMappings';

interface MultiSelectProjectorRoomsProps {
  turarDepartment: string;
  turarRoom: string;
  connectedRooms: Array<{
    projector_department: string;
    projector_room: string;
    id: string;
  }>;
  onAdd: (projectorDept: string, projectorRoom: string) => void;
  onRemove: (connectionId: string) => void;
  isLoading?: boolean;
}

export default function MultiSelectProjectorRooms({
  turarDepartment,
  turarRoom,
  connectedRooms,
  onAdd,
  onRemove,
  isLoading = false
}: MultiSelectProjectorRoomsProps) {
  const [selectedRooms, setSelectedRooms] = useState<Set<string>>(new Set());

  console.log('üöÄ MultiSelectProjectorRooms RENDER:', {
    turarDepartment,
    turarRoom,
    connectedRoomsCount: connectedRooms.length,
    isLoading
  });

  const { data: projectorData } = useProjectorData();
  const { data: departmentMappings } = useDepartmentMappings();

  // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º –æ—Ç–¥–µ–ª–µ–Ω–∏–µ–º –¢—É—Ä–∞—Ä
  const linkedProjectorDepartments = React.useMemo(() => {
    const departments = new Set<string>();
    
    console.log(`üîó MultiSelectProjectorRooms: –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –¥–ª—è "${turarDepartment}"`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º department_mappings (–Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–±)
    const mappingsForDepartment = departmentMappings?.filter(mapping => 
      mapping.turar_department.trim() === turarDepartment.trim()
    ) || [];
    
    console.log('üìã Mappings found:', mappingsForDepartment);
    
    mappingsForDepartment.forEach(mapping => {
      departments.add(mapping.projector_department.trim());
    });
    
    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º projector_floors (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if (projectorData) {
      const oldStyleConnections = projectorData.filter(item => 
        item.connected_turar_department === turarDepartment && item["–û–¢–î–ï–õ–ï–ù–ò–ï"]
      );
      
      console.log('üèóÔ∏è Old style connections found:', oldStyleConnections.length);
      
      oldStyleConnections.forEach(item => {
        departments.add(item["–û–¢–î–ï–õ–ï–ù–ò–ï"].trim());
      });
    }
    
    const finalDepartments = Array.from(departments).sort();
    console.log('‚úÖ Final linked departments:', finalDepartments);
    
    return finalDepartments;
  }, [projectorData, departmentMappings, turarDepartment]);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–±–∏–Ω–µ—Ç—ã –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤
  const availableRooms = React.useMemo(() => {
    if (!projectorData || linkedProjectorDepartments.length === 0) {
      console.log('‚ö†Ô∏è No projectorData or linkedDepartments:', { 
        hasProjectorData: !!projectorData, 
        linkedDepartments: linkedProjectorDepartments
      });
      return [];
    }
    
    console.log('üè† Getting rooms from all linked departments:', linkedProjectorDepartments);
    
    const allRooms = new Map<string, string>(); // room -> department
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–º –æ—Ç–¥–µ–ª–µ–Ω–∏—è–º –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö –∫–∞–±–∏–Ω–µ—Ç—ã
    linkedProjectorDepartments.forEach(department => {
      const departmentRecords = projectorData.filter(item => 
        item["–û–¢–î–ï–õ–ï–ù–ò–ï"]?.trim() === department.trim()
      );
      
      console.log(`üìã Found ${departmentRecords.length} records for department "${department}"`);
      
      departmentRecords.forEach(item => {
        const roomName = item["–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ü–û–ú–ï–©–ï–ù–ò–Ø"];
        if (roomName && roomName.trim()) {
          allRooms.set(roomName.trim(), department);
        }
      });
    });
    
    const roomsArray = Array.from(allRooms.keys()).sort();
    console.log('üè† All available rooms from linked departments:', roomsArray.length, roomsArray.slice(0, 10));
    
    return roomsArray;
  }, [projectorData, linkedProjectorDepartments]);

  // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
  const getRoomDepartment = (roomName: string): string => {
    if (!projectorData) return '';
    
    for (const department of linkedProjectorDepartments) {
      const hasRoom = projectorData.some(item => 
        item["–û–¢–î–ï–õ–ï–ù–ò–ï"]?.trim() === department.trim() && 
        item["–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ü–û–ú–ï–©–ï–ù–ò–Ø"]?.trim() === roomName.trim()
      );
      if (hasRoom) return department;
    }
    return linkedProjectorDepartments[0] || '';
  };

  const handleRoomCheckboxChange = (room: string, checked: boolean) => {
    const newSelectedRooms = new Set(selectedRooms);
    if (checked) {
      newSelectedRooms.add(room);
    } else {
      newSelectedRooms.delete(room);
    }
    setSelectedRooms(newSelectedRooms);
  };

  const handleAddSelectedRooms = () => {
    if (selectedRooms.size === 0) return;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
    selectedRooms.forEach(room => {
      const department = getRoomDepartment(room);
      onAdd(department, room);
    });
    
    // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
    setSelectedRooms(new Set());
  };

  const isRoomAlreadyConnected = (roomName: string) => {
    return connectedRooms.some(conn => conn.projector_room === roomName);
  };

  console.log('üè† MultiSelectProjectorRooms Final State:', {
    turarDepartment,
    turarRoom,
    linkedDepartments: linkedProjectorDepartments,
    availableRooms: availableRooms.length,
    connectedRooms: connectedRooms.length,
    hasProjectorData: !!projectorData,
    projectorDataLength: projectorData?.length || 0,
    hasDepartmentMappings: !!departmentMappings,
    departmentMappingsLength: departmentMappings?.length || 0
  });

  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤—Å–µ–º –Ω–µ—Ç, –ø–æ–∫–∞–∂–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (!projectorData && !departmentMappings) {
    return (
      <div className="p-4 border border-dashed rounded">
        <div className="text-sm text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
      </div>
    );
  }

  return (
    <div className="space-y-3">
      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="p-3 border rounded bg-blue-50 dark:bg-blue-900/20">
        <div className="text-sm font-medium mb-2">–û—Ç–ª–∞–¥–∫–∞ MultiSelectProjectorRooms:</div>
        <div className="text-xs space-y-1">
          <div>–¢—É—Ä–∞—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏–µ: "{turarDepartment}"</div>
          <div>–¢—É—Ä–∞—Ä –∫–∞–±–∏–Ω–µ—Ç: "{turarRoom}"</div>
          <div>–°–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è: {linkedProjectorDepartments.length} - {JSON.stringify(linkedProjectorDepartments)}</div>
          <div>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã: {availableRooms.length}</div>
          <div>–¢–µ–∫—É—â–∏–µ —Å–≤—è–∑–∏: {connectedRooms.length}</div>
          <div>–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤: {projectorData?.length || 0}</div>
          <div>–°–≤—è–∑–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–π: {departmentMappings?.length || 0}</div>
        </div>
      </div>
      
      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–≤—è–∑–∏ */}
      {connectedRooms.length > 0 && (
        <div className="space-y-2">
          <div className="text-sm font-medium text-green-700 dark:text-green-400">
            –°–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ ({connectedRooms.length}):
          </div>
          <div className="space-y-2">
            {connectedRooms.map((conn) => (
              <div 
                key={conn.id} 
                className="flex items-center justify-between gap-2 bg-green-50 dark:bg-green-900/20 p-2 rounded border border-green-200 dark:border-green-800"
              >
                <div className="flex items-center gap-2">
                  <Check className="h-3 w-3 text-green-600" />
                  <Building2 className="h-3 w-3 text-muted-foreground" />
                  <div className="text-sm">
                    <div className="font-medium">{conn.projector_department}</div>
                    <div className="text-xs text-muted-foreground">{conn.projector_room}</div>
                  </div>
                </div>
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={() => onRemove(conn.id)}
                  disabled={isLoading}
                  className="h-6 w-6 p-0 text-red-600 hover:text-red-700 hover:bg-red-100"
                >
                  <X className="h-3 w-3" />
                </Button>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ */}
      {linkedProjectorDepartments.length > 0 ? (
        <Card className="border-dashed">
          <CardContent className="p-3">
            <div className="text-sm font-medium mb-3">
              –î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑–∏ —Å –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤:
            </div>
            
            {/* –ü—Ä—è–º–æ–π –≤—ã–±–æ—Ä –∫–∞–±–∏–Ω–µ—Ç–æ–≤ */}
            {availableRooms.length > 0 && (
              <div className="space-y-2">
                <div className="text-sm font-medium">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç—ã:</div>
                <div className="max-h-40 overflow-y-auto space-y-2 border rounded p-2">
                  {availableRooms.map((room) => {
                    const isConnected = isRoomAlreadyConnected(room);
                    const isSelected = selectedRooms.has(room);
                    const roomDepartment = getRoomDepartment(room);
                    
                    return (
                      <div key={room} className="flex items-center space-x-2">
                        <Checkbox
                          id={`room-${room}`}
                          checked={isSelected}
                          disabled={isConnected || isLoading}
                          onCheckedChange={(checked) => handleRoomCheckboxChange(room, checked as boolean)}
                        />
                        <label 
                          htmlFor={`room-${room}`} 
                          className={`text-sm flex-1 cursor-pointer ${
                            isSelected ? 'font-medium text-green-700 dark:text-green-400' : ''
                          } ${
                            isConnected ? 'opacity-50 line-through' : ''
                          }`}
                        >
                          <div>{room}</div>
                          <div className="text-xs text-muted-foreground">{roomDepartment}</div>
                          {isConnected && (
                            <span className="text-xs text-muted-foreground ml-2">(—É–∂–µ —Å–≤—è–∑–∞–Ω)</span>
                          )}
                        </label>
                        {isSelected && (
                          <Check className="h-4 w-4 text-green-600" />
                        )}
                      </div>
                    );
                  })}
                </div>
                
                {selectedRooms.size > 0 && (
                  <Button
                    size="sm"
                    onClick={handleAddSelectedRooms}
                    disabled={isLoading}
                    className="w-full"
                  >
                    <Plus className="h-3 w-3 mr-1" />
                    –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã ({selectedRooms.size})
                  </Button>
                )}
              </div>
            )}

            {availableRooms.length === 0 && (
              <div className="text-xs text-muted-foreground italic">
                –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏—è—Ö
              </div>
            )}
          </CardContent>
        </Card>
      ) : (
        <div className="text-xs text-muted-foreground italic">
          –°–Ω–∞—á–∞–ª–∞ —Å–≤—è–∂–∏—Ç–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è
        </div>
      )}
    </div>
  );
}