import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Link2, X } from 'lucide-react'
import { useRoomsByDepartmentId } from '@/hooks/useRoomsById'
import { useRoomConnectionsById, RoomConnectionById } from '@/hooks/useRoomConnectionsById'
import { useTurarRoomsByDepartmentId, useProjectorRoomsByDepartmentId } from '@/hooks/useActualRoomsById'
import { useTurarRoomEquipment, useProjectorRoomEquipment } from '@/hooks/useRoomEquipment'
import RoomEquipmentDisplay from '@/components/RoomEquipmentDisplay'
import { supabase } from '@/integrations/supabase/client'
import { useUserRole } from '@/hooks/useUserRole'

interface DepartmentRoomsDisplayProps {
  departmentId: string;
  departmentName: string;
  onLinkRoom?: (roomId: string, roomName: string) => void;
  onRemoveConnection?: (connectionId: string) => void;
  linkingRoom?: {
    departmentId: string;
    roomId: string;
    roomName: string;
    departmentName: string;
    isProjectorDepartment: boolean;
  } | null;
  connections?: RoomConnectionById[];
  isProjectorDepartment?: boolean;
  selectedRoomId?: string;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
function ConnectedRoomDisplay({ connectionId, roomId, isProjectorRoom, onRemove }: {
  connectionId: string;
  roomId: string;
  isProjectorRoom: boolean;
  onRemove?: (connectionId: string) => void;
}) {
  const [roomName, setRoomName] = useState<string>('–ó–∞–≥—Ä—É–∑–∫–∞...');

  useEffect(() => {
    const fetchRoomName = async () => {
      try {
        if (isProjectorRoom) {
          const { data } = await supabase
            .from("projector_floors")
            .select('"–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ü–û–ú–ï–©–ï–ù–ò–Ø"')
            .eq("id", roomId)
            .limit(1)
            .single();
          setRoomName(data?.["–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ü–û–ú–ï–©–ï–ù–ò–Ø"] || `ID: ${roomId}`);
        } else {
          const { data } = await supabase
            .from("turar_medical")
            .select('"–ü–æ–º–µ—â–µ–Ω–∏–µ/–ö–∞–±–∏–Ω–µ—Ç"')
            .eq("id", roomId)
            .limit(1)
            .single();
          setRoomName(data?.["–ü–æ–º–µ—â–µ–Ω–∏–µ/–ö–∞–±–∏–Ω–µ—Ç"] || `ID: ${roomId}`);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞:', error);
        setRoomName(`ID: ${roomId}`);
      }
    };

    fetchRoomName();
  }, [roomId, isProjectorRoom]);

  return (
    <div className="flex items-center justify-between bg-muted/50 p-3 rounded-lg">
      <div className="text-sm">
        {isProjectorRoom ? (
          <span>üìç –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–∏: {roomName}</span>
        ) : (
          <span>üìç –¢—É—Ä–∞—Ä: {roomName}</span>
        )}
      </div>
      {onRemove && (
        <Button
          size="sm"
          variant="ghost"
          className="hover:bg-red-100 hover:text-red-600 gap-1"
          onClick={() => onRemove(connectionId)}
        >
          <X className="h-3 w-3" />
          –£–¥–∞–ª–∏—Ç—å
        </Button>
      )}
    </div>
  );
}

export default function DepartmentRoomsDisplay({
  departmentId,
  departmentName,
  onLinkRoom,
  onRemoveConnection,
  linkingRoom,
  connections = [],
  isProjectorDepartment = false,
  selectedRoomId
}: DepartmentRoomsDisplayProps) {
  const [expandedRooms, setExpandedRooms] = useState<Set<string>>(new Set())
  const { data: rooms, isLoading } = useRoomsByDepartmentId(departmentId)
  const { canEdit } = useUserRole()
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ö—É–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
  const { data: turarRooms, isLoading: isTurarLoading } = useTurarRoomsByDepartmentId(departmentId)
  const { data: projectorRooms, isLoading: isProjectorLoading } = useProjectorRoomsByDepartmentId(departmentId)
  
  // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏—è
  const actualRooms = isProjectorDepartment ? projectorRooms : turarRooms
  const actualIsLoading = isProjectorDepartment ? isProjectorLoading : isTurarLoading

  const toggleRoom = (roomId: string) => {
    const newExpanded = new Set(expandedRooms)
    if (newExpanded.has(roomId)) {
      newExpanded.delete(roomId)
    } else {
      newExpanded.add(roomId)
    }
    setExpandedRooms(newExpanded)
  }

  const getConnectedRooms = (roomId: string) => {
    if (isProjectorDepartment) {
      return connections.filter(conn => conn.projector_room_id === roomId)
    } else {
      return connections.filter(conn => conn.turar_room_id === roomId)
    }
  }

  const canLinkRoom = (roomId: string) => {
    if (!linkingRoom) return true; // –í—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
    
    // –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω –∫–∞–±–∏–Ω–µ—Ç, —Ç–æ –º–æ–∂–Ω–æ —Å–≤—è–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏—è
    if (isProjectorDepartment) {
      // –ü—Ä–æ–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–≤—è–∑—ã–≤–∞—Ç—å—Å—è —Å –¢—É—Ä–∞—Ä (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–∑ –¢—É—Ä–∞—Ä)
      return linkingRoom && linkingRoom.departmentId !== departmentId;
    } else {
      // –¢—É—Ä–∞—Ä –º–æ–∂–µ—Ç —Å–≤—è–∑—ã–≤–∞—Ç—å—Å—è —Å –ü—Ä–æ–µ–∫—Ç–æ—Ä (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–∑ –ü—Ä–æ–µ–∫—Ç–æ—Ä)
      return linkingRoom && linkingRoom.departmentId !== departmentId;
    }
  };

  if (actualIsLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>{departmentName}</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤...</div>
        </CardContent>
      </Card>
    )
  }

  if (!actualRooms || actualRooms.length === 0) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>{departmentName}</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center text-muted-foreground">–ù–µ—Ç –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –≤ —ç—Ç–æ–º –æ—Ç–¥–µ–ª–µ–Ω–∏–∏</div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>{departmentName}</span>
          <Badge variant="secondary">{actualRooms.length} –∫–∞–±–∏–Ω–µ—Ç–æ–≤</Badge>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <Accordion type="multiple" value={Array.from(expandedRooms)}>
          {actualRooms.map((room) => {
            const connectedRooms = getConnectedRooms(room.id)
            const isLinkingTarget = canLinkRoom(room.id)
            
            return (
              <AccordionItem key={room.id} value={room.id}>
                <AccordionTrigger 
                  onClick={() => toggleRoom(room.id)}
                  className="hover:no-underline"
                >
                  <div className="flex items-center justify-between w-full pr-4">
                    <div className="flex items-center gap-3">
                      <span className="font-medium">{room.room_name}</span>
                      {connectedRooms.length > 0 && (
                        <Badge variant="outline" className="text-xs">
                          <Link2 className="h-3 w-3 mr-1" />
                          {connectedRooms.length}
                        </Badge>
                      )}
                    </div>
                    
                    <div className="flex items-center gap-2">
                      {/* –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è */}
                      {onLinkRoom && canEdit() && (
                        <Button
                          size="sm"
                          variant={selectedRoomId === room.id ? "default" : "outline"}
                          className="gap-2"
                          onClick={(e) => {
                            e.stopPropagation()
                            onLinkRoom(room.id, room.room_name)
                          }}
                        >
                          <Link2 className="h-4 w-4" />
                          {selectedRoomId === room.id ? '–í—ã–±—Ä–∞–Ω' : '–í—ã–±—Ä–∞—Ç—å'}
                        </Button>
                      )}
                      
                      {/* –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è */}
                      {linkingRoom && linkingRoom.roomId === room.id && (
                        <Badge variant="default" className="text-xs">
                          –ò—Å—Ö–æ–¥–Ω—ã–π
                        </Badge>
                      )}
                    </div>
                  </div>
                </AccordionTrigger>
                
                <AccordionContent>
                  <div className="pt-4 space-y-3">
                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–±–∏–Ω–µ—Ç–µ */}
                    <div className="text-sm font-medium text-primary">
                      üìç {room.room_name}
                    </div>
                    
                    {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è */}
                    <div className="space-y-2">
                      <div className="text-sm font-medium flex items-center gap-2">
                        üîß –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ:
                      </div>
                      <RoomEquipmentDisplay 
                        roomId={room.id}
                        isProjectorDepartment={isProjectorDepartment}
                      />
                    </div>
                    
                    {/* –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤—è–∑–∏ */}
                    {connectedRooms.length > 0 && (
                      <div className="space-y-2">
                        <div className="text-sm font-medium flex items-center gap-2">
                          <Link2 className="h-4 w-4" />
                          –°–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã:
                        </div>
                        {connectedRooms.map((connection) => (
                          <ConnectedRoomDisplay
                            key={connection.id}
                            connectionId={connection.id}
                            roomId={isProjectorDepartment ? connection.turar_room_id : connection.projector_room_id}
                            isProjectorRoom={!isProjectorDepartment}
                            onRemove={onRemoveConnection}
                          />
                        ))}
                      </div>
                    )}
                    
                    {/* –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å–≤—è–∑–µ–π */}
                    {connectedRooms.length === 0 && (
                      <div className="text-sm text-muted-foreground italic bg-muted/30 p-3 rounded-lg text-center">
                        –ö–∞–±–∏–Ω–µ—Ç –Ω–µ —Å–≤—è–∑–∞–Ω —Å –¥—Ä—É–≥–∏–º–∏ –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏
                      </div>
                    )}
                  </div>
                </AccordionContent>
              </AccordionItem>
            )
          })}
        </Accordion>
      </CardContent>
    </Card>
  )
}