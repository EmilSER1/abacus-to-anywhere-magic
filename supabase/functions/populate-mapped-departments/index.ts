import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    const { department_mapping_id, projector_department, turar_department } = await req.json()

    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è mapping: ${department_mapping_id}`)
    console.log(`üìä –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–∏: "${projector_department}", –¢—É—Ä–∞—Ä: "${turar_department}"`)

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤
    const { data: projectorData, error: projectorError } = await supabase
      .from('projector_floors')
      .select('*')
      .ilike('–û–¢–î–ï–õ–ï–ù–ò–ï', `%${projector_department}%`)

    if (projectorError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤:', projectorError)
      throw projectorError
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${projectorData?.length || 0} –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤`)

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¢—É—Ä–∞—Ä
    const { data: turarData, error: turarError } = await supabase
      .from('turar_medical')
      .select('*')
      .ilike('–û—Ç–¥–µ–ª–µ–Ω–∏–µ/–ë–ª–æ–∫', `%${turar_department}%`)

    if (turarError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¢—É—Ä–∞—Ä:', turarError)
      throw turarError
    }

    console.log(`üè• –ù–∞–π–¥–µ–Ω–æ ${turarData?.length || 0} –∑–∞–ø–∏—Å–µ–π –¢—É—Ä–∞—Ä`)

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    const mappedProjectorData = projectorData?.map(item => ({
      department_mapping_id,
      original_record_id: item.id,
      floor_number: item["–≠–¢–ê–ñ"],
      block_name: item["–ë–õ–û–ö"],
      department_name: item["–û–¢–î–ï–õ–ï–ù–ò–ï"],
      room_code: item["–ö–û–î –ü–û–ú–ï–©–ï–ù–ò–Ø"],
      room_name: item["–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ü–û–ú–ï–©–ï–ù–ò–Ø"],
      room_area: item["–ü–ª–æ—â–∞–¥—å (–º2)"],
      equipment_code: item["–ö–æ–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"],
      equipment_name: item["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"],
      equipment_unit: item["–ï–¥. –∏–∑–º."],
      equipment_quantity: item["–ö–æ–ª-–≤–æ"],
      equipment_notes: item["–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"]
    })) || []

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¢—É—Ä–∞—Ä –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    const mappedTurarData = turarData?.map(item => ({
      department_mapping_id,
      original_record_id: item.id,
      department_name: item["–û—Ç–¥–µ–ª–µ–Ω–∏–µ/–ë–ª–æ–∫"],
      room_name: item["–ü–æ–º–µ—â–µ–Ω–∏–µ/–ö–∞–±–∏–Ω–µ—Ç"],
      equipment_code: item["–ö–æ–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"],
      equipment_name: item["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"],
      equipment_quantity: item["–ö–æ–ª-–≤–æ"]
    })) || []

    // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤
    if (mappedProjectorData.length > 0) {
      const { error: insertProjectorError } = await supabase
        .from('mapped_projector_rooms')
        .insert(mappedProjectorData)

      if (insertProjectorError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤:', insertProjectorError)
        throw insertProjectorError
      }

      console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${mappedProjectorData.length} –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤`)
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¢—É—Ä–∞—Ä
    if (mappedTurarData.length > 0) {
      const { error: insertTurarError } = await supabase
        .from('mapped_turar_rooms')
        .insert(mappedTurarData)

      if (insertTurarError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¢—É—Ä–∞—Ä:', insertTurarError)
        throw insertTurarError
      }

      console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${mappedTurarData.length} –∑–∞–ø–∏—Å–µ–π –¢—É—Ä–∞—Ä`)
    }

    const result = {
      success: true,
      department_mapping_id,
      projector_records: mappedProjectorData.length,
      turar_records: mappedTurarData.length
    }

    console.log(`üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:`, result)

    return new Response(
      JSON.stringify(result),
      { 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      },
    )

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ populate-mapped-departments:', error)
    return new Response(
      JSON.stringify({ 
        error: error.message,
        success: false
      }),
      { 
        status: 400,
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      },
    )
  }
})