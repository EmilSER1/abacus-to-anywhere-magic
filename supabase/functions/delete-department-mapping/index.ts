import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.57.4'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
}

Deno.serve(async (req) => {
  console.log('üîµ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', req.method, req.url);
  
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OPTIONS –∑–∞–ø—Ä–æ—Å');
    return new Response(null, { 
      status: 200,
      headers: corsHeaders 
    });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    const { mappingId } = await req.json()
    
    if (!mappingId) {
      throw new Error('mapping ID is required')
    }

    console.log('üóëÔ∏è –ù–ê–ß–ò–ù–ê–ï–ú –ë–ï–ó–û–ü–ê–°–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –°–í–Ø–ó–ò:', { mappingId })

    // 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const { data: mapping, error: mappingError } = await supabase
      .from('department_mappings')
      .select('*')
      .eq('id', mappingId)
      .single()

    if (mappingError || !mapping) {
      console.error('‚ùå –°–≤—è–∑—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', mappingError)
      throw new Error('Department mapping not found')
    }

    console.log('üìã –ù–∞–π–¥–µ–Ω–∞ —Å–≤—è–∑—å:', mapping)

    // 2. –û—á–∏—â–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ projector_floors
    console.log('üßπ –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ projector_floors...')
    const { error: projectorUpdateError } = await supabase
      .from('projector_floors')
      .update({
        connected_turar_department: null,
        connected_turar_room: null,
        connected_turar_room_id: null,
        updated_at: new Date().toISOString()
      })
      .eq('department_id', mapping.projector_department_id)

    if (projectorUpdateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ projector_floors:', projectorUpdateError)
    } else {
      console.log('‚úÖ projector_floors –æ—á–∏—â–µ–Ω–∞')
    }

    // 3. –û—á–∏—â–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ turar_medical
    console.log('üßπ –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ turar_medical...')
    const { error: turarUpdateError } = await supabase
      .from('turar_medical')
      .update({
        connected_projector_department: null,
        connected_projector_room: null,
        connected_projector_room_id: null,
        updated_at: new Date().toISOString()
      })
      .eq('department_id', mapping.turar_department_id)

    if (turarUpdateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ turar_medical:', turarUpdateError)
    } else {
      console.log('‚úÖ turar_medical –æ—á–∏—â–µ–Ω–∞')
    }

    // 4. –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤
    console.log('üßπ –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤...')
    const { error: roomConnectionsError } = await supabase
      .from('room_connections')
      .delete()
      .or(`projector_department_id.eq.${mapping.projector_department_id},turar_department_id.eq.${mapping.turar_department_id}`)

    if (roomConnectionsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è room_connections:', roomConnectionsError)
    } else {
      console.log('‚úÖ room_connections –æ—á–∏—â–µ–Ω—ã')
    }

    // 5. –£–¥–∞–ª—è–µ–º mapped_projector_rooms
    console.log('üßπ –£–¥–∞–ª—è–µ–º mapped_projector_rooms...')
    const { error: mappedProjectorError } = await supabase
      .from('mapped_projector_rooms')
      .delete()
      .eq('department_mapping_id', mappingId)

    if (mappedProjectorError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è mapped_projector_rooms:', mappedProjectorError)
    } else {
      console.log('‚úÖ mapped_projector_rooms –æ—á–∏—â–µ–Ω—ã')
    }

    // 6. –£–¥–∞–ª—è–µ–º mapped_turar_rooms
    console.log('üßπ –£–¥–∞–ª—è–µ–º mapped_turar_rooms...')
    const { error: mappedTurarError } = await supabase
      .from('mapped_turar_rooms')
      .delete()
      .eq('department_mapping_id', mappingId)

    if (mappedTurarError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è mapped_turar_rooms:', mappedTurarError)
    } else {
      console.log('‚úÖ mapped_turar_rooms –æ—á–∏—â–µ–Ω—ã')
    }

    // 7. –ù–∞–∫–æ–Ω–µ—Ü, —É–¥–∞–ª—è–µ–º —Å–∞–º—É —Å–≤—è–∑—å –æ—Ç–¥–µ–ª–µ–Ω–∏–π
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –æ—Ç–¥–µ–ª–µ–Ω–∏–π...')
    const { error: deleteError } = await supabase
      .from('department_mappings')
      .delete()
      .eq('id', mappingId)

    if (deleteError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–π:', deleteError)
      throw deleteError
    }

    console.log('‚úÖ –°–í–Ø–ó–¨ –£–°–ü–ï–®–ù–û –£–î–ê–õ–ï–ù–ê:', mappingId)

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: 'Department mapping deleted successfully',
        deletedMappingId: mappingId 
      }),
      { 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    )

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error)
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message || 'Internal server error' 
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    )
  }
})