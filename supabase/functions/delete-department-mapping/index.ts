import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.57.4'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
}

Deno.serve(async (req) => {
  console.log('üîµ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', req.method, req.url);
  
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OPTIONS –∑–∞–ø—Ä–æ—Å');
    return new Response(null, { 
      status: 200,
      headers: corsHeaders 
    });
  }

  try {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞...');
    
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    
    if (!supabaseUrl || !supabaseKey) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      throw new Error('Missing Supabase environment variables');
    }
    
    const supabase = createClient(supabaseUrl, supabaseKey);

    let requestBody;
    try {
      requestBody = await req.json();
      console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', requestBody);
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
      throw new Error('Invalid JSON in request body');
    }

    const { mappingId } = requestBody;
    
    if (!mappingId) {
      throw new Error('mapping ID is required')
    }

    console.log('üóëÔ∏è –ù–ê–ß–ò–ù–ê–ï–ú –ë–ï–ó–û–ü–ê–°–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –°–í–Ø–ó–ò:', { mappingId })

    // 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const { data: mapping, error: mappingError } = await supabase
      .from('department_mappings')
      .select('*')
      .eq('id', mappingId)
      .single()

    if (mappingError || !mapping) {
      console.error('‚ùå –°–≤—è–∑—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', mappingError)
      throw new Error('Department mapping not found')
    }

    console.log('üìã –ù–∞–π–¥–µ–Ω–∞ —Å–≤—è–∑—å:', mapping)

    // 2. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–∞–º—É —Å–≤—è–∑—å –æ—Ç–¥–µ–ª–µ–Ω–∏–π (—ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–∑–æ—Ä–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –æ—Ç–¥–µ–ª–µ–Ω–∏–π...')
    const { error: deleteError } = await supabase
      .from('department_mappings')
      .delete()
      .eq('id', mappingId)

    if (deleteError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–π:', deleteError)
      throw deleteError
    }

    console.log('‚úÖ –°–í–Ø–ó–¨ –£–°–ü–ï–®–ù–û –£–î–ê–õ–ï–ù–ê:', mappingId)

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: 'Department mapping deleted successfully',
        deletedMappingId: mappingId 
      }),
      { 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    )

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error)
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message || 'Internal server error' 
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    )
  }
})